// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AlertsQueryData, AlertsQueryResponse, AlertsActiveData, AlertsActiveResponse, AlertsActiveCountResponse, AlertsActiveZoneData, AlertsActiveZoneResponse, AlertsActiveAreaData, AlertsActiveAreaResponse, AlertsActiveRegionData, AlertsActiveRegionResponse, AlertsTypesResponse, AlertsSingleData, AlertsSingleResponse, CwsuData, CwsuResponse, CwasData, CwasResponse, CwaData, CwaResponse, SigmetQueryData, SigmetQueryResponse, SigmetsByAtsuData, SigmetsByAtsuResponse, SigmetsByAtsuByDateData, SigmetsByAtsuByDateResponse, SigmetData, SigmetResponse, GlossaryResponse, GridpointData, GridpointResponse, GridpointForecastData, GridpointForecastResponse, GridpointForecastHourlyData, GridpointForecastHourlyResponse, GridpointStationsData, GridpointStationsResponse, IconsData, IconsResponse, IconsDualConditionData, IconsDualConditionResponse, IconsSummaryResponse, SatelliteThumbnailsData, SatelliteThumbnailsResponse, StationObservationListData, StationObservationListResponse, StationObservationLatestData, StationObservationLatestResponse, StationObservationTimeData, StationObservationTimeResponse, TafsData, TafsResponse, TafData, TafResponse, ObsStationsData, ObsStationsResponse, ObsStationData, ObsStationResponse, OfficeData, OfficeResponse, OfficeHeadlineData, OfficeHeadlineResponse, OfficeHeadlinesData, OfficeHeadlinesResponse, PointData, PointResponse, PointStationsData, PointStationsResponse, RadarServersData, RadarServersResponse, RadarServerData, RadarServerResponse, RadarStationsData, RadarStationsResponse, RadarStationData, RadarStationResponse, RadarStationAlarmsData, RadarStationAlarmsResponse, RadarQueueData, RadarQueueResponse, RadarProfilerData, RadarProfilerResponse, ProductsQueryData, ProductsQueryResponse, ProductLocationsResponse, ProductTypesResponse, ProductData, ProductResponse, ProductsTypeData, ProductsTypeResponse, ProductsTypeLocationsData, ProductsTypeLocationsResponse, LocationProductsData, LocationProductsResponse, ProductsTypeLocationData, ProductsTypeLocationResponse, ZoneListData, ZoneListResponse, ZoneListTypeData, ZoneListTypeResponse, ZoneData, ZoneResponse, ZoneForecastData, ZoneForecastResponse, ZoneObsData, ZoneObsResponse, ZoneStationsData, ZoneStationsResponse } from './types.gen';

/**
 * Returns all alerts
 * @param data The data for the request.
 * @param data.active List only active alerts (use /alerts/active endpoints instead)
 * @param data.start Start time
 * @param data.end End time
 * @param data.status Status (actual, exercise, system, test, draft)
 * @param data.messageType Message type (alert, update, cancel)
 * @param data.event Event name
 * @param data.code Event code
 * @param data.area State/territory code or marine area code
 * This parameter is incompatible with the following parameters: point, region, region_type, zone
 *
 * @param data.point Point (latitude,longitude)
 * This parameter is incompatible with the following parameters: area, region, region_type, zone
 *
 * @param data.region Marine region code
 * This parameter is incompatible with the following parameters: area, point, region_type, zone
 *
 * @param data.regionType Region type (land or marine)
 * This parameter is incompatible with the following parameters: area, point, region, zone
 *
 * @param data.zone Zone ID (forecast or county)
 * This parameter is incompatible with the following parameters: area, point, region, region_type
 *
 * @param data.urgency Urgency (immediate, expected, future, past, unknown)
 * @param data.severity Severity (extreme, severe, moderate, minor, unknown)
 * @param data.certainty Certainty (observed, likely, possible, unlikely, unknown)
 * @param data.limit Limit
 * @param data.cursor Pagination cursor
 * @returns AlertCollectionJsonLd A collection of alerts.
 * @throws ApiError
 */
export const alertsQuery = (data: AlertsQueryData = {}): CancelablePromise<AlertsQueryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts',
    query: {
        active: data.active,
        start: data.start,
        end: data.end,
        status: data.status,
        message_type: data.messageType,
        event: data.event,
        code: data.code,
        area: data.area,
        point: data.point,
        region: data.region,
        region_type: data.regionType,
        zone: data.zone,
        urgency: data.urgency,
        severity: data.severity,
        certainty: data.certainty,
        limit: data.limit,
        cursor: data.cursor
    },
    errors: {
        301: 'Certain common queries may be redirected to discrete URLs',
        default: 'An error response.'
    }
}); };

/**
 * Returns all currently active alerts
 * @param data The data for the request.
 * @param data.status Status (actual, exercise, system, test, draft)
 * @param data.messageType Message type (alert, update, cancel)
 * @param data.event Event name
 * @param data.code Event code
 * @param data.area State/territory code or marine area code
 * This parameter is incompatible with the following parameters: point, region, region_type, zone
 *
 * @param data.point Point (latitude,longitude)
 * This parameter is incompatible with the following parameters: area, region, region_type, zone
 *
 * @param data.region Marine region code
 * This parameter is incompatible with the following parameters: area, point, region_type, zone
 *
 * @param data.regionType Region type (land or marine)
 * This parameter is incompatible with the following parameters: area, point, region, zone
 *
 * @param data.zone Zone ID (forecast or county)
 * This parameter is incompatible with the following parameters: area, point, region, region_type
 *
 * @param data.urgency Urgency (immediate, expected, future, past, unknown)
 * @param data.severity Severity (extreme, severe, moderate, minor, unknown)
 * @param data.certainty Certainty (observed, likely, possible, unlikely, unknown)
 * @param data.limit Limit
 * @returns AlertCollectionJsonLd A collection of alerts.
 * @throws ApiError
 */
export const alertsActive = (data: AlertsActiveData = {}): CancelablePromise<AlertsActiveResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/active',
    query: {
        status: data.status,
        message_type: data.messageType,
        event: data.event,
        code: data.code,
        area: data.area,
        point: data.point,
        region: data.region,
        region_type: data.regionType,
        zone: data.zone,
        urgency: data.urgency,
        severity: data.severity,
        certainty: data.certainty,
        limit: data.limit
    },
    errors: {
        301: 'Certain common queries may be redirected to discrete URLs',
        default: 'An error response.'
    }
}); };

/**
 * Returns info on the number of active alerts
 * @returns unknown A data structure showing the counts of active alerts broken down by various categories
 * @throws ApiError
 */
export const alertsActiveCount = (): CancelablePromise<AlertsActiveCountResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/active/count',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns active alerts for the given NWS public zone or county
 * @param data The data for the request.
 * @param data.zoneId NWS public zone/county identifier
 * @returns AlertCollectionJsonLd A collection of alerts.
 * @throws ApiError
 */
export const alertsActiveZone = (data: AlertsActiveZoneData): CancelablePromise<AlertsActiveZoneResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/active/zone/{zoneId}',
    path: {
        zoneId: data.zoneId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns active alerts for the given area (state or marine area)
 * @param data The data for the request.
 * @param data.area State/area ID
 * @returns AlertCollectionJsonLd A collection of alerts.
 * @throws ApiError
 */
export const alertsActiveArea = (data: AlertsActiveAreaData): CancelablePromise<AlertsActiveAreaResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/active/area/{area}',
    path: {
        area: data.area
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns active alerts for the given marine region
 * @param data The data for the request.
 * @param data.region Marine region ID
 * @returns AlertCollectionJsonLd A collection of alerts.
 * @throws ApiError
 */
export const alertsActiveRegion = (data: AlertsActiveRegionData): CancelablePromise<AlertsActiveRegionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/active/region/{region}',
    path: {
        region: data.region
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of alert types
 * @returns unknown A list of recognized event types
 * @throws ApiError
 */
export const alertsTypes = (): CancelablePromise<AlertsTypesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/types',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a specific alert
 * @param data The data for the request.
 * @param data.id Alert identifier
 * @returns AlertJsonLd An alert record
 * @throws ApiError
 */
export const alertsSingle = (data: AlertsSingleData): CancelablePromise<AlertsSingleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/alerts/{id}',
    path: {
        id: data.id
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a Center Weather Service Unit
 * @param data The data for the request.
 * @param data.cwsuId NWS CWSU ID
 * @returns Office success
 * @throws ApiError
 */
export const cwsu = (data: CwsuData): CancelablePromise<CwsuResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/cwsus/{cwsuId}',
    path: {
        cwsuId: data.cwsuId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of Center Weather Advisories from a CWSU
 * @param data The data for the request.
 * @param data.cwsuId NWS CWSU ID
 * @returns CenterWeatherAdvisoryCollectionGeoJson success
 * @throws ApiError
 */
export const cwas = (data: CwasData): CancelablePromise<CwasResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/cwsus/{cwsuId}/cwas',
    path: {
        cwsuId: data.cwsuId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of Center Weather Advisories from a CWSU
 * @param data The data for the request.
 * @param data.cwsuId NWS CWSU ID
 * @param data.date Date (YYYY-MM-DD format)
 * @param data.sequence Sequence number
 * @returns CenterWeatherAdvisoryGeoJson success
 * @throws ApiError
 */
export const cwa = (data: CwaData): CancelablePromise<CwaResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}',
    path: {
        cwsuId: data.cwsuId,
        date: data.date,
        sequence: data.sequence
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of SIGMET/AIRMETs
 * @param data The data for the request.
 * @param data.start Start time
 * @param data.end End time
 * @param data.date Date (YYYY-MM-DD format)
 * @param data.atsu ATSU identifier
 * @param data.sequence SIGMET sequence number
 * @returns SigmetCollectionGeoJson success
 * @throws ApiError
 */
export const sigmetQuery = (data: SigmetQueryData = {}): CancelablePromise<SigmetQueryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/sigmets',
    query: {
        start: data.start,
        end: data.end,
        date: data.date,
        atsu: data.atsu,
        sequence: data.sequence
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of SIGMET/AIRMETs for the specified ATSU
 * @param data The data for the request.
 * @param data.atsu ATSU identifier
 * @returns SigmetCollectionGeoJson success
 * @throws ApiError
 */
export const sigmetsByAtsu = (data: SigmetsByAtsuData): CancelablePromise<SigmetsByAtsuResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/sigmets/{atsu}',
    path: {
        atsu: data.atsu
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of SIGMET/AIRMETs for the specified ATSU for the specified date
 * @param data The data for the request.
 * @param data.atsu ATSU identifier
 * @param data.date Date (YYYY-MM-DD format)
 * @returns SigmetCollectionGeoJson success
 * @throws ApiError
 */
export const sigmetsByAtsuByDate = (data: SigmetsByAtsuByDateData): CancelablePromise<SigmetsByAtsuByDateResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/sigmets/{atsu}/{date}',
    path: {
        atsu: data.atsu,
        date: data.date
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a specific SIGMET/AIRMET
 * @param data The data for the request.
 * @param data.atsu ATSU identifier
 * @param data.date Date (YYYY-MM-DD format)
 * @param data.time Time (HHMM format). This time is always specified in UTC (Zulu) time.
 * @returns SigmetGeoJson success
 * @throws ApiError
 */
export const sigmet = (data: SigmetData): CancelablePromise<SigmetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/aviation/sigmets/{atsu}/{date}/{time}',
    path: {
        atsu: data.atsu,
        date: data.date,
        time: data.time
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns glossary terms
 * @returns unknown A set of glossary terms
 * @throws ApiError
 */
export const glossary = (): CancelablePromise<GlossaryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/glossary',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns raw numerical forecast data for a 2.5km grid area
 * @param data The data for the request.
 * @param data.wfo Forecast office ID
 * @param data.x Forecast grid X coordinate
 * @param data.y Forecast grid Y coordinate
 * @returns Gridpoint Gridpoint forecast data
 * @throws ApiError
 */
export const gridpoint = (data: GridpointData): CancelablePromise<GridpointResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/gridpoints/{wfo}/{x},{y}',
    path: {
        wfo: data.wfo,
        x: data.x,
        y: data.y
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a textual forecast for a 2.5km grid area
 * @param data The data for the request.
 * @param data.wfo Forecast office ID
 * @param data.x Forecast grid X coordinate
 * @param data.y Forecast grid Y coordinate
 * @param data.featureFlags Enable future and experimental features (see documentation for more info):
 * * forecast_temperature_qv: Represent temperature as QuantitativeValue
 * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
 *
 * @param data.units Use US customary or SI (metric) units in textual output
 * @returns GridpointForecastJsonLd A forecast for a gridpoint.
 * @throws ApiError
 */
export const gridpointForecast = (data: GridpointForecastData): CancelablePromise<GridpointForecastResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/gridpoints/{wfo}/{x},{y}/forecast',
    path: {
        wfo: data.wfo,
        x: data.x,
        y: data.y
    },
    headers: {
        'Feature-Flags': data.featureFlags
    },
    query: {
        units: data.units
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a textual hourly forecast for a 2.5km grid area
 * @param data The data for the request.
 * @param data.wfo Forecast office ID
 * @param data.x Forecast grid X coordinate
 * @param data.y Forecast grid Y coordinate
 * @param data.featureFlags Enable future and experimental features (see documentation for more info):
 * * forecast_temperature_qv: Represent temperature as QuantitativeValue
 * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
 *
 * @param data.units Use US customary or SI (metric) units in textual output
 * @returns GridpointForecastJsonLd A forecast for a gridpoint.
 * @throws ApiError
 */
export const gridpointForecastHourly = (data: GridpointForecastHourlyData): CancelablePromise<GridpointForecastHourlyResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/gridpoints/{wfo}/{x},{y}/forecast/hourly',
    path: {
        wfo: data.wfo,
        x: data.x,
        y: data.y
    },
    headers: {
        'Feature-Flags': data.featureFlags
    },
    query: {
        units: data.units
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of observation stations usable for a given 2.5km grid area
 * @param data The data for the request.
 * @param data.wfo Forecast office ID
 * @param data.x Forecast grid X coordinate
 * @param data.y Forecast grid Y coordinate
 * @param data.limit Limit
 * @param data.cursor Pagination cursor
 * @returns ObservationStationCollectionJsonLd A collection of observation stations.
 * @throws ApiError
 */
export const gridpointStations = (data: GridpointStationsData): CancelablePromise<GridpointStationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/gridpoints/{wfo}/{x},{y}/stations',
    path: {
        wfo: data.wfo,
        x: data.x,
        y: data.y
    },
    query: {
        limit: data.limit,
        cursor: data.cursor
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * @deprecated
 * Returns a forecast icon. Icon services in API are deprecated.
 * @param data The data for the request.
 * @param data.set .
 * @param data.timeOfDay .
 * @param data.first .
 * @param data.size Font size
 * @param data.fontsize Font size
 * @returns BinaryFile success
 * @throws ApiError
 */
export const icons = (data: IconsData): CancelablePromise<IconsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/icons/{set}/{timeOfDay}/{first}',
    path: {
        set: data.set,
        timeOfDay: data.timeOfDay,
        first: data.first
    },
    query: {
        size: data.size,
        fontsize: data.fontsize
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * @deprecated
 * Returns a forecast icon. Icon services in API are deprecated.
 * @param data The data for the request.
 * @param data.set .
 * @param data.timeOfDay .
 * @param data.first .
 * @param data.second .
 * @param data.size Font size
 * @param data.fontsize Font size
 * @returns BinaryFile success
 * @throws ApiError
 */
export const iconsDualCondition = (data: IconsDualConditionData): CancelablePromise<IconsDualConditionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/icons/{set}/{timeOfDay}/{first}/{second}',
    path: {
        set: data.set,
        timeOfDay: data.timeOfDay,
        first: data.first,
        second: data.second
    },
    query: {
        size: data.size,
        fontsize: data.fontsize
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * @deprecated
 * Returns a list of icon codes and textual descriptions. Icon services in API are deprecated.
 * @returns unknown success
 * @throws ApiError
 */
export const iconsSummary = (): CancelablePromise<IconsSummaryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/icons',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * @deprecated
 * Returns a thumbnail image for a satellite region. Image services in API are deprecated.
 * @param data The data for the request.
 * @param data.area .
 * @returns BinaryFile An image file
 * @throws ApiError
 */
export const satelliteThumbnails = (data: SatelliteThumbnailsData): CancelablePromise<SatelliteThumbnailsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/thumbnails/satellite/{area}',
    path: {
        area: data.area
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of observations for a given station
 * @param data The data for the request.
 * @param data.stationId Observation station ID
 * @param data.start Start time
 * @param data.end End time
 * @param data.limit Limit
 * @returns ObservationCollectionJsonLd A collection of observation records.
 * @throws ApiError
 */
export const stationObservationList = (data: StationObservationListData): CancelablePromise<StationObservationListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}/observations',
    path: {
        stationId: data.stationId
    },
    query: {
        start: data.start,
        end: data.end,
        limit: data.limit
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns the latest observation for a station
 * @param data The data for the request.
 * @param data.stationId Observation station ID
 * @param data.requireQc Require QC
 * @returns Observation An observation record.
 * @throws ApiError
 */
export const stationObservationLatest = (data: StationObservationLatestData): CancelablePromise<StationObservationLatestResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}/observations/latest',
    path: {
        stationId: data.stationId
    },
    query: {
        require_qc: data.requireQc
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a single observation.
 * @param data The data for the request.
 * @param data.time Timestamp of requested observation
 * @param data.stationId Observation station ID
 * @returns Observation An observation record.
 * @throws ApiError
 */
export const stationObservationTime = (data: StationObservationTimeData): CancelablePromise<StationObservationTimeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}/observations/{time}',
    path: {
        time: data.time,
        stationId: data.stationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns Terminal Aerodrome Forecasts for the specified airport station.
 * @param data The data for the request.
 * @param data.stationId Observation station ID
 * @returns unknown success
 * @throws ApiError
 */
export const tafs = (data: TafsData): CancelablePromise<TafsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}/tafs',
    path: {
        stationId: data.stationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a single Terminal Aerodrome Forecast.
 * @param data The data for the request.
 * @param data.stationId Observation station ID
 * @param data.date Date (YYYY-MM-DD format)
 * @param data.time Time (HHMM format). This time is always specified in UTC (Zulu) time.
 * @returns unknown success
 * @throws ApiError
 */
export const taf = (data: TafData): CancelablePromise<TafResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}/tafs/{date}/{time}',
    path: {
        stationId: data.stationId,
        date: data.date,
        time: data.time
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of observation stations.
 * @param data The data for the request.
 * @param data.id Filter by observation station ID
 * @param data.state Filter by state/marine area code
 * @param data.limit Limit
 * @param data.cursor Pagination cursor
 * @returns ObservationStationCollectionJsonLd A collection of observation stations.
 * @throws ApiError
 */
export const obsStations = (data: ObsStationsData = {}): CancelablePromise<ObsStationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations',
    query: {
        id: data.id,
        state: data.state,
        limit: data.limit,
        cursor: data.cursor
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given observation station
 * @param data The data for the request.
 * @param data.stationId Observation station ID
 * @returns ObservationStationJsonLd success
 * @throws ApiError
 */
export const obsStation = (data: ObsStationData): CancelablePromise<ObsStationResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/stations/{stationId}',
    path: {
        stationId: data.stationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a NWS forecast office
 * @param data The data for the request.
 * @param data.officeId NWS office ID
 * @returns Office success
 * @throws ApiError
 */
export const office = (data: OfficeData): CancelablePromise<OfficeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/offices/{officeId}',
    path: {
        officeId: data.officeId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a specific news headline for a given NWS office
 * @param data The data for the request.
 * @param data.officeId NWS office ID
 * @param data.headlineId Headline record ID
 * @returns OfficeHeadline success
 * @throws ApiError
 */
export const officeHeadline = (data: OfficeHeadlineData): CancelablePromise<OfficeHeadlineResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/offices/{officeId}/headlines/{headlineId}',
    path: {
        officeId: data.officeId,
        headlineId: data.headlineId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of news headlines for a given NWS office
 * @param data The data for the request.
 * @param data.officeId NWS office ID
 * @returns OfficeHeadlineCollection success
 * @throws ApiError
 */
export const officeHeadlines = (data: OfficeHeadlinesData): CancelablePromise<OfficeHeadlinesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/offices/{officeId}/headlines',
    path: {
        officeId: data.officeId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given latitude/longitude point
 * @param data The data for the request.
 * @param data.point Point (latitude, longitude)
 * @returns PointJsonLd success
 * @throws ApiError
 */
export const point = (data: PointData): CancelablePromise<PointResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/points/{point}',
    path: {
        point: data.point
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * @deprecated
 * Returns a list of observation stations for a given point
 * @param data The data for the request.
 * @param data.point Point (latitude, longitude)
 * @returns ProblemDetail An error response.
 * @throws ApiError
 */
export const pointStations = (data: PointStationsData): CancelablePromise<PointStationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/points/{point}/stations',
    path: {
        point: data.point
    },
    errors: {
        301: 'redirect to gridpoint stations'
    }
}); };

/**
 * Returns a list of radar servers
 * @param data The data for the request.
 * @param data.reportingHost Show records from specific reporting host
 * @returns unknown success
 * @throws ApiError
 */
export const radarServers = (data: RadarServersData = {}): CancelablePromise<RadarServersResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/servers',
    query: {
        reportingHost: data.reportingHost
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given radar server
 * @param data The data for the request.
 * @param data.id Server ID
 * @param data.reportingHost Show records from specific reporting host
 * @returns unknown success
 * @throws ApiError
 */
export const radarServer = (data: RadarServerData): CancelablePromise<RadarServerResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/servers/{id}',
    path: {
        id: data.id
    },
    query: {
        reportingHost: data.reportingHost
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of radar stations
 * @param data The data for the request.
 * @param data.stationType Limit results to a specific station type or types
 * @param data.reportingHost Show RDA and latency info from specific reporting host
 * @param data.host Show latency info from specific LDM host
 * @returns unknown success
 * @throws ApiError
 */
export const radarStations = (data: RadarStationsData = {}): CancelablePromise<RadarStationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/stations',
    query: {
        stationType: data.stationType,
        reportingHost: data.reportingHost,
        host: data.host
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given radar station
 * @param data The data for the request.
 * @param data.stationId Radar station ID
 * @param data.reportingHost Show RDA and latency info from specific reporting host
 * @param data.host Show latency info from specific LDM host
 * @returns unknown success
 * @throws ApiError
 */
export const radarStation = (data: RadarStationData): CancelablePromise<RadarStationResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/stations/{stationId}',
    path: {
        stationId: data.stationId
    },
    query: {
        reportingHost: data.reportingHost,
        host: data.host
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given radar station alarms
 * @param data The data for the request.
 * @param data.stationId Radar station ID
 * @returns unknown success
 * @throws ApiError
 */
export const radarStationAlarms = (data: RadarStationAlarmsData): CancelablePromise<RadarStationAlarmsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/stations/{stationId}/alarms',
    path: {
        stationId: data.stationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given radar queue
 * @param data The data for the request.
 * @param data.host LDM host
 * @param data.limit Record limit
 * @param data.arrived Range for arrival time
 * @param data.created Range for creation time
 * @param data.published Range for publish time
 * @param data.station Station identifier
 * @param data.type Record type
 * @param data.feed Originating product feed
 * @param data.resolution Resolution version
 * @returns unknown success
 * @throws ApiError
 */
export const radarQueue = (data: RadarQueueData): CancelablePromise<RadarQueueResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/queues/{host}',
    path: {
        host: data.host
    },
    query: {
        limit: data.limit,
        arrived: data.arrived,
        created: data.created,
        published: data.published,
        station: data.station,
        type: data.type,
        feed: data.feed,
        resolution: data.resolution
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given radar wind profiler
 * @param data The data for the request.
 * @param data.stationId Profiler station ID
 * @param data.time Time interval
 * @param data.interval Averaging interval
 * @returns unknown success
 * @throws ApiError
 */
export const radarProfiler = (data: RadarProfilerData): CancelablePromise<RadarProfilerResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/radar/profilers/{stationId}',
    path: {
        stationId: data.stationId
    },
    query: {
        time: data.time,
        interval: data.interval
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of text products
 * @param data The data for the request.
 * @param data.location Location id
 * @param data.start Start time
 * @param data.end End time
 * @param data.office Issuing office
 * @param data.wmoid WMO id code
 * @param data.type Product code
 * @param data.limit Limit
 * @returns TextProductCollection success
 * @throws ApiError
 */
export const productsQuery = (data: ProductsQueryData = {}): CancelablePromise<ProductsQueryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products',
    query: {
        location: data.location,
        start: data.start,
        end: data.end,
        office: data.office,
        wmoid: data.wmoid,
        type: data.type,
        limit: data.limit
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of valid text product issuance locations
 * @returns TextProductLocationCollection success
 * @throws ApiError
 */
export const productLocations = (): CancelablePromise<ProductLocationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/locations',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of valid text product types and codes
 * @returns TextProductTypeCollection success
 * @throws ApiError
 */
export const productTypes = (): CancelablePromise<ProductTypesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/types',
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a specific text product
 * @param data The data for the request.
 * @param data.productId .
 * @returns TextProduct success
 * @throws ApiError
 */
export const product = (data: ProductData): CancelablePromise<ProductResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/{productId}',
    path: {
        productId: data.productId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of text products of a given type
 * @param data The data for the request.
 * @param data.typeId .
 * @returns TextProductCollection success
 * @throws ApiError
 */
export const productsType = (data: ProductsTypeData): CancelablePromise<ProductsTypeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/types/{typeId}',
    path: {
        typeId: data.typeId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of valid text product issuance locations for a given product type
 * @param data The data for the request.
 * @param data.typeId .
 * @returns TextProductLocationCollection success
 * @throws ApiError
 */
export const productsTypeLocations = (data: ProductsTypeLocationsData): CancelablePromise<ProductsTypeLocationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/types/{typeId}/locations',
    path: {
        typeId: data.typeId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of valid text product types for a given issuance location
 * @param data The data for the request.
 * @param data.locationId .
 * @returns TextProductTypeCollection success
 * @throws ApiError
 */
export const locationProducts = (data: LocationProductsData): CancelablePromise<LocationProductsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/locations/{locationId}/types',
    path: {
        locationId: data.locationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of text products of a given type for a given issuance location
 * @param data The data for the request.
 * @param data.typeId .
 * @param data.locationId .
 * @returns TextProductCollection success
 * @throws ApiError
 */
export const productsTypeLocation = (data: ProductsTypeLocationData): CancelablePromise<ProductsTypeLocationResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/products/types/{typeId}/locations/{locationId}',
    path: {
        typeId: data.typeId,
        locationId: data.locationId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of zones
 * @param data The data for the request.
 * @param data.id Zone ID (forecast or county)
 * @param data.area State/marine area code
 * @param data.region Region code
 * @param data.type Zone type
 * @param data.point Point (latitude,longitude)
 * @param data.includeGeometry Include geometry in results (true/false)
 * @param data.limit Limit
 * @param data.effective Effective date/time
 * @returns ZoneCollectionJsonLd success
 * @throws ApiError
 */
export const zoneList = (data: ZoneListData = {}): CancelablePromise<ZoneListResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones',
    query: {
        id: data.id,
        area: data.area,
        region: data.region,
        type: data.type,
        point: data.point,
        include_geometry: data.includeGeometry,
        limit: data.limit,
        effective: data.effective
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of zones of a given type
 * @param data The data for the request.
 * @param data.type Zone type
 * @param data.id Zone ID (forecast or county)
 * @param data.area State/marine area code
 * @param data.region Region code
 * @param data.type Zone type
 * @param data.point Point (latitude,longitude)
 * @param data.includeGeometry Include geometry in results (true/false)
 * @param data.limit Limit
 * @param data.effective Effective date/time
 * @returns ZoneCollectionJsonLd success
 * @throws ApiError
 */
export const zoneListType = (data: ZoneListTypeData): CancelablePromise<ZoneListTypeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones/{type}',
    path: {
        type: data.type
    },
    query: {
        id: data.id,
        area: data.area,
        region: data.region,
        type: data.type,
        point: data.point,
        include_geometry: data.includeGeometry,
        limit: data.limit,
        effective: data.effective
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns metadata about a given zone
 * @param data The data for the request.
 * @param data.type Zone type
 * @param data.zoneId NWS public zone/county identifier
 * @param data.effective Effective date/time
 * @returns Zone success
 * @throws ApiError
 */
export const zone = (data: ZoneData): CancelablePromise<ZoneResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones/{type}/{zoneId}',
    path: {
        type: data.type,
        zoneId: data.zoneId
    },
    query: {
        effective: data.effective
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns the current zone forecast for a given zone
 * @param data The data for the request.
 * @param data.type Zone type
 * @param data.zoneId NWS public zone/county identifier
 * @returns ZoneForecast success
 * @throws ApiError
 */
export const zoneForecast = (data: ZoneForecastData): CancelablePromise<ZoneForecastResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones/{type}/{zoneId}/forecast',
    path: {
        type: data.type,
        zoneId: data.zoneId
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of observations for a given zone
 * @param data The data for the request.
 * @param data.zoneId NWS public zone/county identifier
 * @param data.start Start date/time
 * @param data.end End date/time
 * @param data.limit Limit
 * @returns ObservationCollectionJsonLd success
 * @throws ApiError
 */
export const zoneObs = (data: ZoneObsData): CancelablePromise<ZoneObsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones/forecast/{zoneId}/observations',
    path: {
        zoneId: data.zoneId
    },
    query: {
        start: data.start,
        end: data.end,
        limit: data.limit
    },
    errors: {
        default: 'An error response.'
    }
}); };

/**
 * Returns a list of observation stations for a given zone
 * @param data The data for the request.
 * @param data.zoneId NWS public zone/county identifier
 * @param data.limit Limit
 * @param data.cursor Pagination cursor
 * @returns ObservationStationCollectionJsonLd A collection of observation stations.
 * @throws ApiError
 */
export const zoneStations = (data: ZoneStationsData): CancelablePromise<ZoneStationsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/zones/forecast/{zoneId}/stations',
    path: {
        zoneId: data.zoneId
    },
    query: {
        limit: data.limit,
        cursor: data.cursor
    },
    errors: {
        default: 'An error response.'
    }
}); };