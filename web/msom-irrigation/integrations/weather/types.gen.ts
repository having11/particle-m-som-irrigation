// This file is auto-generated by @hey-api/openapi-ts

/**
 * An object representing a public alert message.
 * Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.
 * http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12
 *
 */
export type Alert = {
    id?: AlertId;
    /**
     * A textual description of the area affected by the alert.
     */
    areaDesc?: string;
    /**
     * Lists of codes for NWS public zones and counties affected by the alert.
     */
    geocode?: {
        /**
         * A list of NWS public zone or county identifiers.
         */
        UGC?: Array<NWSZoneID>;
        /**
         * A list of SAME (Specific Area Message Encoding) codes for affected counties.
         */
        SAME?: Array<(string)>;
    };
    /**
     * An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.
     *
     */
    affectedZones?: Array<(string)>;
    /**
     * A list of prior alerts that this alert updates or replaces.
     */
    references?: Array<{
        /**
         * An API link to the prior alert.
         */
        '@id'?: string;
        identifier?: AlertId;
        /**
         * The sender of the prior alert.
         */
        sender?: string;
        /**
         * The time the prior alert was sent.
         */
        sent?: string;
    }>;
    /**
     * The time of the origination of the alert message.
     */
    sent?: string;
    /**
     * The effective time of the information of the alert message.
     */
    effective?: string;
    /**
     * The expected time of the beginning of the subject event of the alert message.
     */
    onset?: string | null;
    /**
     * The expiry time of the information of the alert message.
     */
    expires?: string;
    /**
     * The expected end time of the subject event of the alert message.
     */
    ends?: string | null;
    status?: AlertStatus;
    messageType?: AlertMessageType;
    /**
     * The code denoting the category of the subject event of the alert message.
     */
    category?: 'Met' | 'Geo' | 'Safety' | 'Security' | 'Rescue' | 'Fire' | 'Health' | 'Env' | 'Transport' | 'Infra' | 'CBRNE' | 'Other';
    severity?: AlertSeverity;
    certainty?: AlertCertainty;
    urgency?: AlertUrgency;
    /**
     * The text denoting the type of the subject event of the alert message.
     */
    event?: string;
    /**
     * Email address of the NWS webmaster.
     */
    sender?: string;
    /**
     * The text naming the originator of the alert message.
     */
    senderName?: string;
    /**
     * The text headline of the alert message.
     */
    headline?: string | null;
    /**
     * The text describing the subject event of the alert message.
     */
    description?: string;
    /**
     * The text describing the recommended action to be taken by recipients of the alert message.
     *
     */
    instruction?: string | null;
    /**
     * The code denoting the type of action recommended for the target audience.
     * This corresponds to responseType in the CAP specification.
     *
     */
    response?: 'Shelter' | 'Evacuate' | 'Prepare' | 'Execute' | 'Avoid' | 'Monitor' | 'Assess' | 'AllClear' | 'None';
    /**
     * System-specific additional parameters associated with the alert message.
     * The keys in this object correspond to parameter definitions in the NWS CAP specification.
     *
     */
    parameters?: {
        [key: string]: Array<unknown>;
    };
};

/**
 * The code denoting the category of the subject event of the alert message.
 */
export type category = 'Met' | 'Geo' | 'Safety' | 'Security' | 'Rescue' | 'Fire' | 'Health' | 'Env' | 'Transport' | 'Infra' | 'CBRNE' | 'Other';

/**
 * The code denoting the type of action recommended for the target audience.
 * This corresponds to responseType in the CAP specification.
 *
 */
export type response = 'Shelter' | 'Evacuate' | 'Prepare' | 'Execute' | 'Avoid' | 'Monitor' | 'Assess' | 'AllClear' | 'None';

export type AlertCollection = {
    /**
     * A title describing the alert collection
     */
    title?: string;
    /**
     * The last time a change occurred to this collection
     */
    updated?: string;
    pagination?: PaginationInfo;
};

export type AlertCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<{
        properties?: Alert;
    }>;
} & AlertCollection;

export type AlertCollectionJsonLd = AlertCollection & {
    '@context'?: JsonLdContext;
    '@graph'?: Array<Alert>;
};

export type AlertCap = {
    [key: string]: unknown;
};

export type AlertGeoJson = GeoJsonFeature & {
    properties?: Alert;
};

export type AlertJsonLd = {
    '@graph'?: Array<Alert>;
};

/**
 * The identifier of the alert message.
 */
export type AlertId = string;

export type AlertCertainty = 'Observed' | 'Likely' | 'Possible' | 'Unlikely' | 'Unknown';

export type AlertMessageType = 'Alert' | 'Update' | 'Cancel' | 'Ack' | 'Error';

export type AlertSeverity = 'Extreme' | 'Severe' | 'Moderate' | 'Minor' | 'Unknown';

export type AlertStatus = 'Actual' | 'Exercise' | 'System' | 'Test' | 'Draft';

export type AlertUrgency = 'Immediate' | 'Expected' | 'Future' | 'Past' | 'Unknown';

/**
 * An alert entry in an Atom feed
 */
export type AlertAtomEntry = {
    id?: string;
    updated?: string;
    published?: string;
    author?: {
        name?: string;
    };
    summary?: string;
    event?: string;
    sent?: string;
    effective?: string;
    expires?: string;
    status?: string;
    msgType?: string;
    category?: string;
    urgency?: string;
    severity?: string;
    certainty?: string;
    areaDesc?: string;
    polygon?: string;
    geocode?: Array<AlertXMLParameter>;
    parameter?: Array<AlertXMLParameter>;
};

export type AlertXMLParameter = {
    valueName?: string;
    value?: string;
};

/**
 * An alert feed in Atom format
 */
export type AlertAtomFeed = {
    id?: string;
    generator?: string;
    updated?: string;
    author?: {
        name?: string;
    };
    title?: string;
    entry?: Array<AlertAtomEntry>;
};

/**
 * State/territory codes and marine area codes
 */
export type AreaCode = StateTerritoryCode | MarineAreaCode;

/**
 * ATSU Identifier
 */
export type ATSUIdentifier = string;

export type BinaryFile = (Blob | File);

export type CenterWeatherAdvisoryCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<{
        properties?: CenterWeatherAdvisory;
    }>;
};

export type CenterWeatherAdvisoryGeoJson = GeoJsonFeature & {
    properties?: CenterWeatherAdvisory;
};

export type CenterWeatherAdvisory = {
    id?: string;
    issueTime?: string;
    cwsu?: NWSCenterWeatherServiceUnitId;
    sequence?: number;
    start?: string;
    end?: string;
    observedProperty?: string;
    text?: string;
};

export type CenterWeatherServiceUnitJsonLd = Office;

/**
 * Date (in YYYY-MM-DD format).
 */
export type Date = string;

/**
 * A geometry represented in Well-Known Text (WKT) format.
 */
export type GeometryString = string | null;

/**
 * A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonBoundingBox = Array<(number)>;

/**
 * A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonCoordinate = Array<(number)>;

/**
 * A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonGeometry = {
    type: 'Point';
    coordinates: GeoJsonCoordinate;
    bbox?: GeoJsonBoundingBox;
} | {
    type: 'LineString';
    coordinates: GeoJsonLineString;
    bbox?: GeoJsonBoundingBox;
} | {
    type: 'Polygon';
    coordinates: GeoJsonPolygon;
    bbox?: GeoJsonBoundingBox;
} | {
    type: 'MultiPoint';
    coordinates: Array<GeoJsonCoordinate>;
    bbox?: GeoJsonBoundingBox;
} | {
    type: 'MultiLineString';
    coordinates: Array<GeoJsonLineString>;
    bbox?: GeoJsonBoundingBox;
} | {
    type: 'MultiPolygon';
    coordinates: Array<GeoJsonPolygon>;
    bbox?: GeoJsonBoundingBox;
} | null;

export type type = 'Point';

/**
 * A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonFeature = {
    '@context'?: JsonLdContext;
    id?: string;
    type: 'Feature';
    geometry: GeoJsonGeometry;
    properties: {
        [key: string]: unknown;
    };
};

export type type2 = 'Feature';

/**
 * A GeoJSON feature collection. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonFeatureCollection = {
    '@context'?: JsonLdContext;
    type: 'FeatureCollection';
    features: Array<GeoJsonFeature>;
};

export type type3 = 'FeatureCollection';

/**
 * A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonLineString = Array<GeoJsonCoordinate>;

/**
 * A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonPolygon = Array<Array<GeoJsonCoordinate>>;

/**
 * Raw forecast data for a 2.5km grid square.
 * This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
 * * temperature
 * * dewpoint
 * * maxTemperature
 * * minTemperature
 * * relativeHumidity
 * * apparentTemperature
 * * heatIndex
 * * windChill
 * * wetBulbGlobeTemperature
 * * skyCover
 * * windDirection
 * * windSpeed
 * * windGust
 * * weather
 * * hazards: Watch and advisory products in effect
 * * probabilityOfPrecipitation
 * * quantitativePrecipitation
 * * iceAccumulation
 * * snowfallAmount
 * * snowLevel
 * * ceilingHeight
 * * visibility
 * * transportWindSpeed
 * * transportWindDirection
 * * mixingHeight
 * * hainesIndex
 * * lightningActivityLevel
 * * twentyFootWindSpeed
 * * twentyFootWindDirection
 * * waveHeight
 * * wavePeriod
 * * waveDirection
 * * primarySwellHeight
 * * primarySwellDirection
 * * secondarySwellHeight
 * * secondarySwellDirection
 * * wavePeriod2
 * * windWaveHeight
 * * dispersionIndex
 * * pressure: Barometric pressure
 * * probabilityOfTropicalStormWinds
 * * probabilityOfHurricaneWinds
 * * potentialOf15mphWinds
 * * potentialOf25mphWinds
 * * potentialOf35mphWinds
 * * potentialOf45mphWinds
 * * potentialOf20mphWindGusts
 * * potentialOf30mphWindGusts
 * * potentialOf40mphWindGusts
 * * potentialOf50mphWindGusts
 * * potentialOf60mphWindGusts
 * * grasslandFireDangerIndex
 * * probabilityOfThunder
 * * davisStabilityIndex
 * * atmosphericDispersionIndex
 * * lowVisibilityOccurrenceRiskIndex
 * * stability
 * * redFlagThreatIndex
 *
 */
export type Gridpoint = {
    [key: string]: GridpointQuantitativeValueLayer;
};

/**
 * A gridpoint layer consisting of quantitative values (numeric values with associated units of measure).
 *
 */
export type GridpointQuantitativeValueLayer = {
    uom?: UnitOfMeasure;
    values: Array<{
        validTime: ISO8601Interval;
        value: number | null;
    }>;
};

export type GridpointGeoJson = GeoJsonFeature & {
    properties?: Gridpoint;
};

export type GridpointJsonLd = Gridpoint;

/**
 * A multi-day forecast for a 2.5km grid square.
 */
export type GridpointForecast = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    units?: GridpointForecastUnits;
    /**
     * The internal generator class used to create the forecast text (used for NWS debugging).
     */
    forecastGenerator?: string;
    /**
     * The time this forecast data was generated.
     */
    generatedAt?: string;
    /**
     * The last update time of the data this forecast was generated from.
     */
    updateTime?: string;
    /**
     * This property is deprecated (use updateTime instead).
     * @deprecated
     */
    updated?: string;
    validTimes?: ISO8601Interval;
    elevation?: QuantitativeValue;
    /**
     * An array of forecast periods.
     */
    periods?: Array<GridpointForecastPeriod>;
};

/**
 * An object containing forecast information for a specific time period (generally 12-hour or 1-hour).
 *
 */
export type GridpointForecastPeriod = {
    /**
     * Sequential period number.
     */
    number?: number;
    /**
     * A textual identifier for the period. This value will not be present for hourly forecasts.
     *
     */
    name?: string;
    /**
     * The starting time that this forecast period is valid for.
     */
    startTime?: string;
    /**
     * The ending time that this forecast period is valid for.
     */
    endTime?: string;
    /**
     * Indicates whether this period is daytime or nighttime.
     */
    isDaytime?: boolean;
    /**
     * High/low temperature for the period, depending on whether the period is day or night.
     * This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
     *
     */
    temperature?: QuantitativeValue | number;
    /**
     * The unit of the temperature value (Fahrenheit or Celsius).
     * This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
     *
     * @deprecated
     */
    temperatureUnit?: 'F' | 'C';
    /**
     * If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
     *
     */
    temperatureTrend?: 'rising' | 'falling' | null;
    probabilityOfPrecipitation?: QuantitativeValue;
    dewpoint?: QuantitativeValue;
    relativeHumidity?: QuantitativeValue;
    /**
     * Wind speed for the period.
     * This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
     *
     */
    windSpeed?: QuantitativeValue | string;
    /**
     * Peak wind gust for the period.
     * This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
     *
     */
    windGust?: QuantitativeValue | string | null;
    /**
     * The prevailing direction of the wind for the period, using a 16-point compass.
     */
    windDirection?: 'N' | 'NNE' | 'NE' | 'ENE' | 'E' | 'ESE' | 'SE' | 'SSE' | 'S' | 'SSW' | 'SW' | 'WSW' | 'W' | 'WNW' | 'NW' | 'NNW';
    /**
     * A link to an icon representing the forecast summary.
     * @deprecated
     */
    icon?: string;
    /**
     * A brief textual forecast summary for the period.
     */
    shortForecast?: string;
    /**
     * A detailed textual forecast for the period.
     */
    detailedForecast?: string;
};

/**
 * The unit of the temperature value (Fahrenheit or Celsius).
 * This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
 *
 * @deprecated
 */
export type temperatureUnit = 'F' | 'C';

/**
 * If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
 *
 */
export type temperatureTrend = 'rising' | 'falling';

/**
 * The prevailing direction of the wind for the period, using a 16-point compass.
 */
export type windDirection = 'N' | 'NNE' | 'NE' | 'ENE' | 'E' | 'ESE' | 'SE' | 'SSE' | 'S' | 'SSW' | 'SW' | 'WSW' | 'W' | 'WNW' | 'NW' | 'NNW';

/**
 * Denotes the units used in the textual portions of the forecast.
 */
export type GridpointForecastUnits = 'us' | 'si';

export type GridpointForecastGeoJson = GeoJsonFeature & {
    properties?: GridpointForecast;
};

export type GridpointForecastJsonLd = GridpointForecast & {
    '@context': JsonLdContext;
    geometry: GeometryString;
};

/**
 * A time duration in ISO 8601 format.
 */
export type ISO8601Duration = string;

/**
 * A time interval in ISO 8601 format. This can be one of:
 *
 * 1. Start and end time
 * 2. Start time and duration
 * 3. Duration and end time
 * The string "NOW" can also be used in place of a start/end time.
 *
 */
export type ISO8601Interval = string;

export type JsonLdContext = Array<unknown> | {
    [key: string]: unknown;
};

/**
 * Land region code. These correspond to the six NWS regional headquarters:
 * * AR: Alaska Region
 * * CR: Central Region
 * * ER: Eastern Region
 * * PR: Pacific Region
 * * SR: Southern Region
 * * WR: Western Region
 *
 */
export type LandRegionCode = 'AR' | 'CR' | 'ER' | 'PR' | 'SR' | 'WR';

/**
 * Marine area code as defined in NWS Directive 10-302:
 * * AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean
 * * AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC
 * * GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL
 * * LC: Lake St. Clair
 * * LE: Lake Erie
 * * LH: Lake Huron
 * * LM: Lake Michigan
 * * LO: Lake Ontario
 * * LS: Lake Superior
 * * PH: Central Pacific Ocean including Hawaiian waters
 * * PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska
 * * PM: Western Pacific Ocean including Mariana Island waters
 * * PS: South Central Pacific Ocean including American Samoa waters
 * * PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border
 * * SL: St. Lawrence River above St. Regis
 *
 */
export type MarineAreaCode = 'AM' | 'AN' | 'GM' | 'LC' | 'LE' | 'LH' | 'LM' | 'LO' | 'LS' | 'PH' | 'PK' | 'PM' | 'PS' | 'PZ' | 'SL';

/**
 * Marine region code. These are groups of marine areas combined.
 * * AL: Alaska waters (PK)
 * * AT: Atlantic Ocean (AM, AN)
 * * GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)
 * * GM: Gulf of Mexico (GM)
 * * PA: Eastern Pacific Ocean and U.S. West Coast (PZ)
 * * PI: Central and Western Pacific (PH, PM, PS)
 *
 */
export type MarineRegionCode = 'AL' | 'AT' | 'GL' | 'GM' | 'PA' | 'PI';

/**
 * An object representing a decoded METAR phenomenon string.
 */
export type MetarPhenomenon = {
    intensity: 'light' | 'heavy' | null;
    modifier: 'patches' | 'blowing' | 'low_drifting' | 'freezing' | 'shallow' | 'partial' | 'showers' | null;
    weather: 'fog_mist' | 'dust_storm' | 'dust' | 'drizzle' | 'funnel_cloud' | 'fog' | 'smoke' | 'hail' | 'snow_pellets' | 'haze' | 'ice_crystals' | 'ice_pellets' | 'dust_whirls' | 'spray' | 'rain' | 'sand' | 'snow_grains' | 'snow' | 'squalls' | 'sand_storm' | 'thunderstorms' | 'unknown' | 'volcanic_ash';
    rawString: string;
    inVicinity?: boolean;
};

export type intensity = 'light' | 'heavy';

export type modifier = 'patches' | 'blowing' | 'low_drifting' | 'freezing' | 'shallow' | 'partial' | 'showers';

export type weather = 'fog_mist' | 'dust_storm' | 'dust' | 'drizzle' | 'funnel_cloud' | 'fog' | 'smoke' | 'hail' | 'snow_pellets' | 'haze' | 'ice_crystals' | 'ice_pellets' | 'dust_whirls' | 'spray' | 'rain' | 'sand' | 'snow_grains' | 'snow' | 'squalls' | 'sand_storm' | 'thunderstorms' | 'unknown' | 'volcanic_ash';

export type MetarSkyCoverage = 'OVC' | 'BKN' | 'SCT' | 'FEW' | 'SKC' | 'CLR' | 'VV';

/**
 * Three-letter identifier for a Center Weather Service Unit (CWSU).
 */
export type NWSCenterWeatherServiceUnitId = 'ZAB' | 'ZAN' | 'ZAU' | 'ZBW' | 'ZDC' | 'ZDV' | 'ZFA' | 'ZFW' | 'ZHU' | 'ZID' | 'ZJX' | 'ZKC' | 'ZLA' | 'ZLC' | 'ZMA' | 'ZME' | 'ZMP' | 'ZNY' | 'ZOA' | 'ZOB' | 'ZSE' | 'ZTL';

/**
 * Three-letter identifier for a NWS office.
 */
export type NWSForecastOfficeId = 'AKQ' | 'ALY' | 'BGM' | 'BOX' | 'BTV' | 'BUF' | 'CAE' | 'CAR' | 'CHS' | 'CLE' | 'CTP' | 'GSP' | 'GYX' | 'ILM' | 'ILN' | 'LWX' | 'MHX' | 'OKX' | 'PBZ' | 'PHI' | 'RAH' | 'RLX' | 'RNK' | 'ABQ' | 'AMA' | 'BMX' | 'BRO' | 'CRP' | 'EPZ' | 'EWX' | 'FFC' | 'FWD' | 'HGX' | 'HUN' | 'JAN' | 'JAX' | 'KEY' | 'LCH' | 'LIX' | 'LUB' | 'LZK' | 'MAF' | 'MEG' | 'MFL' | 'MLB' | 'MOB' | 'MRX' | 'OHX' | 'OUN' | 'SHV' | 'SJT' | 'SJU' | 'TAE' | 'TBW' | 'TSA' | 'ABR' | 'APX' | 'ARX' | 'BIS' | 'BOU' | 'CYS' | 'DDC' | 'DLH' | 'DMX' | 'DTX' | 'DVN' | 'EAX' | 'FGF' | 'FSD' | 'GID' | 'GJT' | 'GLD' | 'GRB' | 'GRR' | 'ICT' | 'ILX' | 'IND' | 'IWX' | 'JKL' | 'LBF' | 'LMK' | 'LOT' | 'LSX' | 'MKX' | 'MPX' | 'MQT' | 'OAX' | 'PAH' | 'PUB' | 'RIW' | 'SGF' | 'TOP' | 'UNR' | 'BOI' | 'BYZ' | 'EKA' | 'FGZ' | 'GGW' | 'HNX' | 'LKN' | 'LOX' | 'MFR' | 'MSO' | 'MTR' | 'OTX' | 'PDT' | 'PIH' | 'PQR' | 'PSR' | 'REV' | 'SEW' | 'SGX' | 'SLC' | 'STO' | 'TFX' | 'TWC' | 'VEF' | 'AER' | 'AFC' | 'AFG' | 'AJK' | 'ALU' | 'GUM' | 'HPA' | 'HFO' | 'PPG' | 'STU' | 'NH1' | 'NH2' | 'ONA' | 'ONP';

/**
 * Three-letter identifier for NWS National HQ.
 */
export type NWSNationalHQId = 'NWS';

export type NWSOfficeId = NWSForecastOfficeId | NWSRegionalHQId | NWSNationalHQId;

/**
 * Three-letter identifier for a NWS Regional HQ.
 */
export type NWSRegionalHQId = 'ARH' | 'CRH' | 'ERH' | 'PRH' | 'SRH' | 'WRH';

/**
 * UGC identifier for a NWS forecast zone or county.
 * The first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).
 * The third letter will be Z for public/fire zone or C for county.
 *
 */
export type NWSZoneID = string;

export type NWSZoneType = 'land' | 'marine' | 'forecast' | 'public' | 'coastal' | 'offshore' | 'fire' | 'county';

export type Observation = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    '@id'?: string;
    '@type'?: 'wx:ObservationStation';
    elevation?: QuantitativeValue;
    station?: string;
    timestamp?: string;
    rawMessage?: string;
    textDescription?: string;
    /**
     * @deprecated
     */
    icon?: string | null;
    presentWeather?: Array<MetarPhenomenon>;
    temperature?: QuantitativeValue;
    dewpoint?: QuantitativeValue;
    windDirection?: QuantitativeValue;
    windSpeed?: QuantitativeValue;
    windGust?: QuantitativeValue;
    barometricPressure?: QuantitativeValue;
    seaLevelPressure?: QuantitativeValue;
    visibility?: QuantitativeValue;
    maxTemperatureLast24Hours?: QuantitativeValue;
    minTemperatureLast24Hours?: QuantitativeValue;
    precipitationLastHour?: QuantitativeValue;
    precipitationLast3Hours?: QuantitativeValue;
    precipitationLast6Hours?: QuantitativeValue;
    relativeHumidity?: QuantitativeValue;
    windChill?: QuantitativeValue;
    heatIndex?: QuantitativeValue;
    cloudLayers?: Array<{
        base: QuantitativeValue;
        amount: MetarSkyCoverage;
    }> | null;
};

export type type4 = 'wx:ObservationStation';

export type ObservationGeoJson = GeoJsonFeature & {
    properties?: Observation;
};

export type ObservationJsonLd = Observation;

export type ObservationCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<{
        properties?: Observation;
    }>;
};

export type ObservationCollectionJsonLd = {
    '@context'?: JsonLdContext;
    '@graph'?: Array<Observation>;
};

export type ObservationStation = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    '@id'?: string;
    '@type'?: 'wx:ObservationStation';
    elevation?: QuantitativeValue;
    stationIdentifier?: string;
    name?: string;
    timeZone?: string;
    /**
     * A link to the NWS public forecast zone containing this station.
     */
    forecast?: string;
    /**
     * A link to the NWS county zone containing this station.
     */
    county?: string;
    /**
     * A link to the NWS fire weather forecast zone containing this station.
     */
    fireWeatherZone?: string;
};

export type ObservationStationGeoJson = GeoJsonFeature & {
    properties?: ObservationStation;
};

export type ObservationStationJsonLd = ObservationStation & {
    '@context': JsonLdContext;
    geometry: GeometryString;
};

export type ObservationStationCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<{
        properties?: ObservationStation;
    }>;
    observationStations?: Array<(string)>;
    pagination?: PaginationInfo;
};

export type ObservationStationCollectionJsonLd = {
    '@context'?: JsonLdContext;
    '@graph'?: Array<ObservationStation>;
    observationStations?: Array<(string)>;
    pagination?: PaginationInfo;
};

export type Office = {
    '@context'?: JsonLdContext;
    '@type'?: 'GovernmentOrganization';
    '@id'?: string;
    id?: string;
    name?: string;
    address?: {
        '@type'?: 'PostalAddress';
        streetAddress?: string;
        addressLocality?: string;
        addressRegion?: string;
        postalCode?: string;
    };
    telephone?: string;
    faxNumber?: string;
    email?: string;
    sameAs?: string;
    nwsRegion?: string;
    parentOrganization?: string;
    responsibleCounties?: Array<(string)>;
    responsibleForecastZones?: Array<(string)>;
    responsibleFireZones?: Array<(string)>;
    approvedObservationStations?: Array<(string)>;
};

export type type5 = 'GovernmentOrganization';

export type OfficeHeadline = {
    '@context'?: JsonLdContext;
    '@id'?: string;
    id?: string;
    office?: string;
    important?: boolean;
    issuanceTime?: string;
    link?: string;
    name?: string;
    title?: string;
    summary?: string | null;
    content?: string;
};

export type OfficeHeadlineCollection = {
    '@context': JsonLdContext;
    '@graph': Array<OfficeHeadline>;
};

/**
 * Links for retrieving more data from paged data sets
 */
export type PaginationInfo = {
    /**
     * A link to the next page of records
     */
    next: string;
};

export type Point = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    '@id'?: string;
    '@type'?: 'wx:Point';
    cwa?: NWSForecastOfficeId;
    forecastOffice?: string;
    gridId?: NWSForecastOfficeId;
    gridX?: number;
    gridY?: number;
    forecast?: string;
    forecastHourly?: string;
    forecastGridData?: string;
    observationStations?: string;
    relativeLocation?: RelativeLocationGeoJson | RelativeLocationJsonLd;
    forecastZone?: string;
    county?: string;
    fireWeatherZone?: string;
    timeZone?: string;
    radarStation?: string;
};

export type type6 = 'wx:Point';

export type PointGeoJson = GeoJsonFeature & {
    properties?: Point;
};

export type PointJsonLd = Point & {
    '@context': JsonLdContext;
    geometry: GeometryString;
};

export type PointString = string;

/**
 * Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).
 */
export type ProblemDetail = {
    /**
     * A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.
     *
     */
    type: string;
    /**
     * A short, human-readable summary of the problem type.
     */
    title: string;
    /**
     * The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.
     *
     */
    status: number;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail: string;
    /**
     * A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.
     *
     */
    instance: string;
    /**
     * A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.
     *
     */
    correlationId: string;
    [key: string]: unknown | string | number;
};

/**
 * A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue
 *
 */
export type QuantitativeValue = {
    /**
     * A measured value
     */
    value?: number | null;
    /**
     * The maximum value of a range of measured values
     */
    maxValue?: number;
    /**
     * The minimum value of a range of measured values
     */
    minValue?: number;
    unitCode?: UnitOfMeasure;
    /**
     * For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
     *
     */
    qualityControl?: 'Z' | 'C' | 'S' | 'V' | 'X' | 'Q' | 'G' | 'B' | 'T';
};

/**
 * For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
 *
 */
export type qualityControl = 'Z' | 'C' | 'S' | 'V' | 'X' | 'Q' | 'G' | 'B' | 'T';

export type RegionCode = LandRegionCode | MarineRegionCode;

export type RelativeLocation = {
    city?: string;
    state?: string;
    distance?: QuantitativeValue;
    bearing?: QuantitativeValue;
};

export type RelativeLocationGeoJson = GeoJsonFeature & {
    properties?: RelativeLocation;
};

export type RelativeLocationJsonLd = RelativeLocation & {
    geometry: GeometryString;
};

export type Sigmet = {
    id?: string;
    issueTime?: string;
    fir?: string | null;
    atsu?: ATSUIdentifier;
    sequence?: string | null;
    phenomenon?: string | null;
    start?: string;
    end?: string;
};

export type SigmetCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<SigmetGeoJson>;
};

export type SigmetGeoJson = GeoJsonFeature & {
    properties?: Sigmet;
};

export type SigmetSequenceNumber = string;

export type StateTerritoryCode = 'AL' | 'AK' | 'AS' | 'AR' | 'AZ' | 'CA' | 'CO' | 'CT' | 'DE' | 'DC' | 'FL' | 'GA' | 'GU' | 'HI' | 'ID' | 'IL' | 'IN' | 'IA' | 'KS' | 'KY' | 'LA' | 'ME' | 'MD' | 'MA' | 'MI' | 'MN' | 'MS' | 'MO' | 'MT' | 'NE' | 'NV' | 'NH' | 'NJ' | 'NM' | 'NY' | 'NC' | 'ND' | 'OH' | 'OK' | 'OR' | 'PA' | 'PR' | 'RI' | 'SC' | 'SD' | 'TN' | 'TX' | 'UT' | 'VT' | 'VI' | 'VA' | 'WA' | 'WV' | 'WI' | 'WY' | 'MP' | 'PW' | 'FM' | 'MH';

export type TextProduct = {
    '@context'?: JsonLdContext;
    '@id'?: string;
    id?: string;
    wmoCollectiveId?: string;
    issuingOffice?: string;
    issuanceTime?: string;
    productCode?: string;
    productName?: string;
    productText?: string;
};

export type TextProductCollection = {
    '@context'?: JsonLdContext;
    '@graph'?: Array<TextProduct>;
};

export type TextProductTypeCollection = {
    '@context'?: JsonLdContext;
    '@graph'?: Array<{
        productCode: string;
        productName: string;
    }>;
};

export type TextProductLocationCollection = {
    '@context'?: JsonLdContext;
    locations?: {
        [key: string]: (string | null);
    };
};

/**
 * A time (in HHMM format). This is always specified in UTC (Zulu) time.
 */
export type Time = string;

/**
 * A string denoting a unit of measure, expressed in the format "{unit}" or "{namespace}:{unit}".
 * Units with the namespace "wmo" or "wmoUnit" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.
 * Units with the namespace "nwsUnit" are currently custom and do not align to any standard.
 * Units with no namespace or the namespace "uc" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).
 * Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.
 *
 */
export type UnitOfMeasure = string;

export type Zone = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    '@id'?: string;
    '@type'?: 'wx:Zone';
    id?: NWSZoneID;
    type?: NWSZoneType;
    name?: string;
    effectiveDate?: string;
    expirationDate?: string;
    state?: StateTerritoryCode | '' | null;
    cwa?: Array<NWSForecastOfficeId>;
    forecastOffices?: Array<(string)>;
    timeZone?: Array<(string)>;
    observationStations?: Array<(string)>;
    radarStation?: string | null;
};

export type type7 = 'wx:Zone';

export type ZoneGeoJson = GeoJsonFeature & {
    properties?: Zone;
};

export type ZoneJsonLd = Zone;

export type ZoneCollectionGeoJson = GeoJsonFeatureCollection & {
    features?: Array<{
        properties?: Zone;
    }>;
};

export type ZoneCollectionJsonLd = {
    '@context'?: JsonLdContext;
    '@graph'?: Array<Zone>;
};

/**
 * An object representing a zone area forecast.
 */
export type ZoneForecast = {
    '@context'?: JsonLdContext;
    geometry?: GeometryString;
    /**
     * An API link to the zone this forecast is for.
     */
    zone?: string;
    /**
     * The time this zone forecast product was published.
     */
    updated?: string;
    /**
     * An array of forecast periods.
     */
    periods?: Array<{
        /**
         * A sequential identifier number.
         */
        number: number;
        /**
         * A textual description of the period.
         */
        name: string;
        /**
         * A detailed textual forecast for the period.
         */
        detailedForecast: string;
    }>;
};

export type ZoneForecastGeoJson = GeoJsonFeature & {
    properties?: ZoneForecast;
};

export type ZoneForecastJsonLd = ZoneForecast;

/**
 * State/territory code or marine area code
 * This parameter is incompatible with the following parameters: point, region, region_type, zone
 *
 */
export type ParameterAlertArea = Array<AreaCode>;

/**
 * Certainty (observed, likely, possible, unlikely, unknown)
 */
export type ParameterAlertCertainty = Array<AlertCertainty>;

/**
 * Event code
 */
export type ParameterAlertCode = Array<(string)>;

/**
 * Event name
 */
export type ParameterAlertEventName = Array<(string)>;

/**
 * Message type (alert, update, cancel)
 */
export type ParameterAlertMessageType = Array<('alert' | 'update' | 'cancel')>;

/**
 * Point (latitude,longitude)
 * This parameter is incompatible with the following parameters: area, region, region_type, zone
 *
 */
export type ParameterAlertPoint = PointString;

/**
 * Marine region code
 * This parameter is incompatible with the following parameters: area, point, region_type, zone
 *
 */
export type ParameterAlertRegion = Array<MarineRegionCode>;

/**
 * Region type (land or marine)
 * This parameter is incompatible with the following parameters: area, point, region, zone
 *
 */
export type ParameterAlertRegionType = 'land' | 'marine';

/**
 * Severity (extreme, severe, moderate, minor, unknown)
 */
export type ParameterAlertSeverity = Array<AlertSeverity>;

/**
 * Status (actual, exercise, system, test, draft)
 */
export type ParameterAlertStatus = Array<('actual' | 'exercise' | 'system' | 'test' | 'draft')>;

/**
 * Urgency (immediate, expected, future, past, unknown)
 */
export type ParameterAlertUrgency = Array<AlertUrgency>;

/**
 * Zone ID (forecast or county)
 * This parameter is incompatible with the following parameters: area, point, region, region_type
 *
 */
export type ParameterAlertZone = Array<NWSZoneID>;

/**
 * ATSU identifier
 */
export type ParameterATSUIdentifier = ATSUIdentifier;

/**
 * Date (YYYY-MM-DD format)
 */
export type ParameterDate = Date;

/**
 * Enable future and experimental features (see documentation for more info):
 * * forecast_temperature_qv: Represent temperature as QuantitativeValue
 * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
 *
 */
export type ParameterGridpointForecastFeatureFlags = Array<('forecast_temperature_qv' | 'forecast_wind_speed_qv')>;

/**
 * Use US customary or SI (metric) units in textual output
 */
export type ParameterGridpointForecastUnits = GridpointForecastUnits;

/**
 * Forecast office ID
 */
export type ParameterGridpointWFO = NWSForecastOfficeId;

/**
 * Forecast grid X coordinate
 */
export type ParameterGridpointX = number;

/**
 * Forecast grid Y coordinate
 */
export type ParameterGridpointY = number;

/**
 * Limit
 */
export type ParameterLimit = number;

/**
 * NWS CWSU ID
 */
export type ParameterNWSCenterWeatherServiceUnitId = NWSCenterWeatherServiceUnitId;

/**
 * NWS office ID
 */
export type ParameterNWSOfficeId = NWSOfficeId;

/**
 * NWS public zone/county identifier
 */
export type ParameterNWSZoneId = NWSZoneID;

/**
 * Observation station ID
 */
export type ParameterObservationStationId = string;

/**
 * Pagination cursor
 */
export type ParameterPaginationCursor = string;

/**
 * Point (latitude, longitude)
 */
export type ParameterPathPoint = PointString;

/**
 * Date (YYYY-MM-DD format)
 */
export type ParameterQueryDate = Date;

/**
 * Start time
 */
export type ParameterQueryStartTime = string;

/**
 * End time
 */
export type ParameterQueryEndTime = string;

/**
 * SIGMET sequence number
 */
export type ParameterSigmetSequenceNumber = SigmetSequenceNumber;

/**
 * Time (HHMM format). This time is always specified in UTC (Zulu) time.
 */
export type ParameterTime = Time;

export type AlertsQueryData = {
    /**
     * List only active alerts (use /alerts/active endpoints instead)
     * @deprecated
     */
    active?: boolean;
    /**
     * State/territory code or marine area code
     * This parameter is incompatible with the following parameters: point, region, region_type, zone
     *
     */
    area?: Array<AreaCode>;
    /**
     * Certainty (observed, likely, possible, unlikely, unknown)
     */
    certainty?: Array<AlertCertainty>;
    /**
     * Event code
     */
    code?: Array<(string)>;
    /**
     * Pagination cursor
     */
    cursor?: string;
    /**
     * End time
     */
    end?: string;
    /**
     * Event name
     */
    event?: Array<(string)>;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Message type (alert, update, cancel)
     */
    messageType?: Array<('alert' | 'update' | 'cancel')>;
    /**
     * Point (latitude,longitude)
     * This parameter is incompatible with the following parameters: area, region, region_type, zone
     *
     */
    point?: PointString;
    /**
     * Marine region code
     * This parameter is incompatible with the following parameters: area, point, region_type, zone
     *
     */
    region?: Array<MarineRegionCode>;
    /**
     * Region type (land or marine)
     * This parameter is incompatible with the following parameters: area, point, region, zone
     *
     */
    regionType?: 'land' | 'marine';
    /**
     * Severity (extreme, severe, moderate, minor, unknown)
     */
    severity?: Array<AlertSeverity>;
    /**
     * Start time
     */
    start?: string;
    /**
     * Status (actual, exercise, system, test, draft)
     */
    status?: Array<('actual' | 'exercise' | 'system' | 'test' | 'draft')>;
    /**
     * Urgency (immediate, expected, future, past, unknown)
     */
    urgency?: Array<AlertUrgency>;
    /**
     * Zone ID (forecast or county)
     * This parameter is incompatible with the following parameters: area, point, region, region_type
     *
     */
    zone?: Array<NWSZoneID>;
};

export type AlertsQueryResponse = AlertCollectionJsonLd;

export type AlertsActiveData = {
    /**
     * State/territory code or marine area code
     * This parameter is incompatible with the following parameters: point, region, region_type, zone
     *
     */
    area?: Array<AreaCode>;
    /**
     * Certainty (observed, likely, possible, unlikely, unknown)
     */
    certainty?: Array<AlertCertainty>;
    /**
     * Event code
     */
    code?: Array<(string)>;
    /**
     * Event name
     */
    event?: Array<(string)>;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Message type (alert, update, cancel)
     */
    messageType?: Array<('alert' | 'update' | 'cancel')>;
    /**
     * Point (latitude,longitude)
     * This parameter is incompatible with the following parameters: area, region, region_type, zone
     *
     */
    point?: PointString;
    /**
     * Marine region code
     * This parameter is incompatible with the following parameters: area, point, region_type, zone
     *
     */
    region?: Array<MarineRegionCode>;
    /**
     * Region type (land or marine)
     * This parameter is incompatible with the following parameters: area, point, region, zone
     *
     */
    regionType?: 'land' | 'marine';
    /**
     * Severity (extreme, severe, moderate, minor, unknown)
     */
    severity?: Array<AlertSeverity>;
    /**
     * Status (actual, exercise, system, test, draft)
     */
    status?: Array<('actual' | 'exercise' | 'system' | 'test' | 'draft')>;
    /**
     * Urgency (immediate, expected, future, past, unknown)
     */
    urgency?: Array<AlertUrgency>;
    /**
     * Zone ID (forecast or county)
     * This parameter is incompatible with the following parameters: area, point, region, region_type
     *
     */
    zone?: Array<NWSZoneID>;
};

export type AlertsActiveResponse = AlertCollectionJsonLd;

export type AlertsActiveCountResponse = {
    /**
     * The total number of active alerts
     */
    total?: number;
    /**
     * The total number of active alerts affecting land zones
     */
    land?: number;
    /**
     * The total number of active alerts affecting marine zones
     */
    marine?: number;
    /**
     * Active alerts by marine region
     */
    regions?: {
        [key: string]: (number);
    };
    /**
     * Active alerts by area (state/territory)
     */
    areas?: {
        [key: string]: (number);
    };
    /**
     * Active alerts by NWS public zone or county code
     */
    zones?: {
        [key: string]: (number);
    };
};

export type AlertsActiveZoneData = {
    /**
     * NWS public zone/county identifier
     */
    zoneId: NWSZoneID;
};

export type AlertsActiveZoneResponse = AlertCollectionJsonLd;

export type AlertsActiveAreaData = {
    /**
     * State/area ID
     */
    area: AreaCode;
};

export type AlertsActiveAreaResponse = AlertCollectionJsonLd;

export type AlertsActiveRegionData = {
    /**
     * Marine region ID
     */
    region: MarineRegionCode;
};

export type AlertsActiveRegionResponse = AlertCollectionJsonLd;

export type AlertsTypesResponse = {
    /**
     * A list of recognized event types
     */
    eventTypes?: Array<(string)>;
};

export type AlertsSingleData = {
    /**
     * Alert identifier
     */
    id: AlertId;
};

export type AlertsSingleResponse = AlertJsonLd;

export type CwsuData = {
    /**
     * NWS CWSU ID
     */
    cwsuId: NWSCenterWeatherServiceUnitId;
};

export type CwsuResponse = Office;

export type CwasData = {
    /**
     * NWS CWSU ID
     */
    cwsuId: NWSCenterWeatherServiceUnitId;
};

export type CwasResponse = CenterWeatherAdvisoryCollectionGeoJson;

export type CwaData = {
    /**
     * NWS CWSU ID
     */
    cwsuId: NWSCenterWeatherServiceUnitId;
    /**
     * Date (YYYY-MM-DD format)
     */
    date: Date;
    /**
     * Sequence number
     */
    sequence: number;
};

export type CwaResponse = CenterWeatherAdvisoryGeoJson;

export type SigmetQueryData = {
    /**
     * ATSU identifier
     */
    atsu?: ATSUIdentifier;
    /**
     * Date (YYYY-MM-DD format)
     */
    date?: Date;
    /**
     * End time
     */
    end?: string;
    /**
     * SIGMET sequence number
     */
    sequence?: SigmetSequenceNumber;
    /**
     * Start time
     */
    start?: string;
};

export type SigmetQueryResponse = SigmetCollectionGeoJson;

export type SigmetsByAtsuData = {
    /**
     * ATSU identifier
     */
    atsu: ATSUIdentifier;
};

export type SigmetsByAtsuResponse = SigmetCollectionGeoJson;

export type SigmetsByAtsuByDateData = {
    /**
     * ATSU identifier
     */
    atsu: ATSUIdentifier;
    /**
     * Date (YYYY-MM-DD format)
     */
    date: Date;
};

export type SigmetsByAtsuByDateResponse = SigmetCollectionGeoJson;

export type SigmetData = {
    /**
     * ATSU identifier
     */
    atsu: ATSUIdentifier;
    /**
     * Date (YYYY-MM-DD format)
     */
    date: Date;
    /**
     * Time (HHMM format). This time is always specified in UTC (Zulu) time.
     */
    time: Time;
};

export type SigmetResponse = SigmetGeoJson;

export type GlossaryResponse = {
    '@context'?: JsonLdContext;
    /**
     * A list of glossary terms
     */
    glossary?: Array<{
        /**
         * The term being defined
         */
        term?: string;
        /**
         * A definition for the term
         */
        definition?: string;
    }>;
};

export type GridpointData = {
    /**
     * Forecast office ID
     */
    wfo: NWSForecastOfficeId;
    /**
     * Forecast grid X coordinate
     */
    x: number;
    /**
     * Forecast grid Y coordinate
     */
    y: number;
};

export type GridpointResponse = Gridpoint;

export type GridpointForecastData = {
    /**
     * Enable future and experimental features (see documentation for more info):
     * * forecast_temperature_qv: Represent temperature as QuantitativeValue
     * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
     *
     */
    featureFlags?: Array<('forecast_temperature_qv' | 'forecast_wind_speed_qv')>;
    /**
     * Use US customary or SI (metric) units in textual output
     */
    units?: GridpointForecastUnits;
    /**
     * Forecast office ID
     */
    wfo: NWSForecastOfficeId;
    /**
     * Forecast grid X coordinate
     */
    x: number;
    /**
     * Forecast grid Y coordinate
     */
    y: number;
};

export type GridpointForecastResponse = GridpointForecastJsonLd;

export type GridpointForecastHourlyData = {
    /**
     * Enable future and experimental features (see documentation for more info):
     * * forecast_temperature_qv: Represent temperature as QuantitativeValue
     * * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
     *
     */
    featureFlags?: Array<('forecast_temperature_qv' | 'forecast_wind_speed_qv')>;
    /**
     * Use US customary or SI (metric) units in textual output
     */
    units?: GridpointForecastUnits;
    /**
     * Forecast office ID
     */
    wfo: NWSForecastOfficeId;
    /**
     * Forecast grid X coordinate
     */
    x: number;
    /**
     * Forecast grid Y coordinate
     */
    y: number;
};

export type GridpointForecastHourlyResponse = GridpointForecastJsonLd;

export type GridpointStationsData = {
    /**
     * Pagination cursor
     */
    cursor?: string;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Forecast office ID
     */
    wfo: NWSForecastOfficeId;
    /**
     * Forecast grid X coordinate
     */
    x: number;
    /**
     * Forecast grid Y coordinate
     */
    y: number;
};

export type GridpointStationsResponse = ObservationStationCollectionJsonLd;

export type IconsData = {
    /**
     * .
     */
    first: string;
    /**
     * Font size
     */
    fontsize?: number;
    /**
     * .
     */
    set: string;
    /**
     * Font size
     */
    size?: 'small' | 'medium' | 'large' | number;
    /**
     * .
     */
    timeOfDay: string;
};

export type IconsResponse = BinaryFile;

export type IconsDualConditionData = {
    /**
     * .
     */
    first: string;
    /**
     * Font size
     */
    fontsize?: number;
    /**
     * .
     */
    second: string;
    /**
     * .
     */
    set: string;
    /**
     * Font size
     */
    size?: 'small' | 'medium' | 'large' | number;
    /**
     * .
     */
    timeOfDay: string;
};

export type IconsDualConditionResponse = BinaryFile;

export type IconsSummaryResponse = {
    '@context'?: JsonLdContext;
    icons: {
        [key: string]: {
            description: string;
        };
    };
};

export type SatelliteThumbnailsData = {
    /**
     * .
     */
    area: 'a' | 'e' | 'g' | 'h' | 'p' | 's' | 'w';
};

export type SatelliteThumbnailsResponse = BinaryFile;

export type StationObservationListData = {
    /**
     * End time
     */
    end?: string;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Start time
     */
    start?: string;
    /**
     * Observation station ID
     */
    stationId: string;
};

export type StationObservationListResponse = ObservationCollectionJsonLd;

export type StationObservationLatestData = {
    /**
     * Require QC
     */
    requireQc?: boolean;
    /**
     * Observation station ID
     */
    stationId: string;
};

export type StationObservationLatestResponse = Observation;

export type StationObservationTimeData = {
    /**
     * Observation station ID
     */
    stationId: string;
    /**
     * Timestamp of requested observation
     */
    time: string;
};

export type StationObservationTimeResponse = Observation;

export type TafsData = {
    /**
     * Observation station ID
     */
    stationId: string;
};

export type TafsResponse = unknown;

export type TafData = {
    /**
     * Date (YYYY-MM-DD format)
     */
    date: Date;
    /**
     * Observation station ID
     */
    stationId: string;
    /**
     * Time (HHMM format). This time is always specified in UTC (Zulu) time.
     */
    time: Time;
};

export type TafResponse = unknown;

export type ObsStationsData = {
    /**
     * Pagination cursor
     */
    cursor?: string;
    /**
     * Filter by observation station ID
     */
    id?: Array<(string)>;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Filter by state/marine area code
     */
    state?: Array<AreaCode>;
};

export type ObsStationsResponse = ObservationStationCollectionJsonLd;

export type ObsStationData = {
    /**
     * Observation station ID
     */
    stationId: string;
};

export type ObsStationResponse = ObservationStationJsonLd;

export type OfficeData = {
    /**
     * NWS office ID
     */
    officeId: NWSOfficeId;
};

export type OfficeResponse = Office;

export type OfficeHeadlineData = {
    /**
     * Headline record ID
     */
    headlineId: string;
    /**
     * NWS office ID
     */
    officeId: NWSOfficeId;
};

export type OfficeHeadlineResponse = OfficeHeadline;

export type OfficeHeadlinesData = {
    /**
     * NWS office ID
     */
    officeId: NWSOfficeId;
};

export type OfficeHeadlinesResponse = OfficeHeadlineCollection;

export type PointData = {
    /**
     * Point (latitude, longitude)
     */
    point: PointString;
};

export type PointResponse = PointJsonLd;

export type PointStationsData = {
    /**
     * Point (latitude, longitude)
     */
    point: PointString;
};

export type PointStationsResponse = ProblemDetail;

export type RadarServersData = {
    /**
     * Show records from specific reporting host
     */
    reportingHost?: string;
};

export type RadarServersResponse = unknown;

export type RadarServerData = {
    /**
     * Server ID
     */
    id: string;
    /**
     * Show records from specific reporting host
     */
    reportingHost?: string;
};

export type RadarServerResponse = unknown;

export type RadarStationsData = {
    /**
     * Show latency info from specific LDM host
     */
    host?: string;
    /**
     * Show RDA and latency info from specific reporting host
     */
    reportingHost?: string;
    /**
     * Limit results to a specific station type or types
     */
    stationType?: Array<(string)>;
};

export type RadarStationsResponse = unknown;

export type RadarStationData = {
    /**
     * Show latency info from specific LDM host
     */
    host?: string;
    /**
     * Show RDA and latency info from specific reporting host
     */
    reportingHost?: string;
    /**
     * Radar station ID
     */
    stationId: string;
};

export type RadarStationResponse = unknown;

export type RadarStationAlarmsData = {
    /**
     * Radar station ID
     */
    stationId: string;
};

export type RadarStationAlarmsResponse = unknown;

export type RadarQueueData = {
    /**
     * Range for arrival time
     */
    arrived?: ISO8601Interval;
    /**
     * Range for creation time
     */
    created?: ISO8601Interval;
    /**
     * Originating product feed
     */
    feed?: string;
    /**
     * LDM host
     */
    host: string;
    /**
     * Record limit
     */
    limit?: number;
    /**
     * Range for publish time
     */
    published?: ISO8601Interval;
    /**
     * Resolution version
     */
    resolution?: number;
    /**
     * Station identifier
     */
    station?: string;
    /**
     * Record type
     */
    type?: string;
};

export type RadarQueueResponse = unknown;

export type RadarProfilerData = {
    /**
     * Averaging interval
     */
    interval?: ISO8601Duration;
    /**
     * Profiler station ID
     */
    stationId: string;
    /**
     * Time interval
     */
    time?: ISO8601Interval;
};

export type RadarProfilerResponse = unknown;

export type ProductsQueryData = {
    /**
     * End time
     */
    end?: string;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Location id
     */
    location?: Array<(string)>;
    /**
     * Issuing office
     */
    office?: Array<(string)>;
    /**
     * Start time
     */
    start?: string;
    /**
     * Product code
     */
    type?: Array<(string)>;
    /**
     * WMO id code
     */
    wmoid?: Array<(string)>;
};

export type ProductsQueryResponse = TextProductCollection;

export type ProductLocationsResponse = TextProductLocationCollection;

export type ProductTypesResponse = TextProductTypeCollection;

export type ProductData = {
    /**
     * .
     */
    productId: string;
};

export type ProductResponse = TextProduct;

export type ProductsTypeData = {
    /**
     * .
     */
    typeId: string;
};

export type ProductsTypeResponse = TextProductCollection;

export type ProductsTypeLocationsData = {
    /**
     * .
     */
    typeId: string;
};

export type ProductsTypeLocationsResponse = TextProductLocationCollection;

export type LocationProductsData = {
    /**
     * .
     */
    locationId: string;
};

export type LocationProductsResponse = TextProductTypeCollection;

export type ProductsTypeLocationData = {
    /**
     * .
     */
    locationId: string;
    /**
     * .
     */
    typeId: string;
};

export type ProductsTypeLocationResponse = TextProductCollection;

export type ZoneListData = {
    /**
     * State/marine area code
     */
    area?: Array<AreaCode>;
    /**
     * Effective date/time
     */
    effective?: string;
    /**
     * Zone ID (forecast or county)
     */
    id?: Array<NWSZoneID>;
    /**
     * Include geometry in results (true/false)
     */
    includeGeometry?: boolean;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Point (latitude,longitude)
     */
    point?: PointString;
    /**
     * Region code
     */
    region?: Array<RegionCode>;
    /**
     * Zone type
     */
    type?: Array<NWSZoneType>;
};

export type ZoneListResponse = ZoneCollectionJsonLd;

export type ZoneListTypeData = {
    /**
     * State/marine area code
     */
    area?: Array<AreaCode>;
    /**
     * Effective date/time
     */
    effective?: string;
    /**
     * Zone ID (forecast or county)
     */
    id?: Array<NWSZoneID>;
    /**
     * Include geometry in results (true/false)
     */
    includeGeometry?: boolean;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Point (latitude,longitude)
     */
    point?: PointString;
    /**
     * Region code
     */
    region?: Array<RegionCode>;
    /**
     * Zone type
     */
    type: NWSZoneType;
    /**
     * Zone type
     */
    type?: Array<NWSZoneType>;
};

export type ZoneListTypeResponse = ZoneCollectionJsonLd;

export type ZoneData = {
    /**
     * Effective date/time
     */
    effective?: string;
    /**
     * Zone type
     */
    type: NWSZoneType;
    /**
     * NWS public zone/county identifier
     */
    zoneId: NWSZoneID;
};

export type ZoneResponse = Zone;

export type ZoneForecastData = {
    /**
     * Zone type
     */
    type: string;
    /**
     * NWS public zone/county identifier
     */
    zoneId: NWSZoneID;
};

export type ZoneForecastResponse = ZoneForecast;

export type ZoneObsData = {
    /**
     * End date/time
     */
    end?: string;
    /**
     * Limit
     */
    limit?: number;
    /**
     * Start date/time
     */
    start?: string;
    /**
     * NWS public zone/county identifier
     */
    zoneId: NWSZoneID;
};

export type ZoneObsResponse = ObservationCollectionJsonLd;

export type ZoneStationsData = {
    /**
     * Pagination cursor
     */
    cursor?: string;
    /**
     * Limit
     */
    limit?: number;
    /**
     * NWS public zone/county identifier
     */
    zoneId: NWSZoneID;
};

export type ZoneStationsResponse = ObservationStationCollectionJsonLd;

export type $OpenApiTs = {
    '/alerts': {
        get: {
            req: AlertsQueryData;
            res: {
                /**
                 * A collection of alerts.
                 */
                200: AlertCollectionJsonLd;
                /**
                 * Certain common queries may be redirected to discrete URLs
                 */
                301: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/active': {
        get: {
            req: AlertsActiveData;
            res: {
                /**
                 * A collection of alerts.
                 */
                200: AlertCollectionJsonLd;
                /**
                 * Certain common queries may be redirected to discrete URLs
                 */
                301: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/active/count': {
        get: {
            res: {
                /**
                 * A data structure showing the counts of active alerts broken down by various categories
                 */
                200: {
                    /**
                     * The total number of active alerts
                     */
                    total?: number;
                    /**
                     * The total number of active alerts affecting land zones
                     */
                    land?: number;
                    /**
                     * The total number of active alerts affecting marine zones
                     */
                    marine?: number;
                    /**
                     * Active alerts by marine region
                     */
                    regions?: {
                        [key: string]: (number);
                    };
                    /**
                     * Active alerts by area (state/territory)
                     */
                    areas?: {
                        [key: string]: (number);
                    };
                    /**
                     * Active alerts by NWS public zone or county code
                     */
                    zones?: {
                        [key: string]: (number);
                    };
                };
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/active/zone/{zoneId}': {
        get: {
            req: AlertsActiveZoneData;
            res: {
                /**
                 * A collection of alerts.
                 */
                200: AlertCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/active/area/{area}': {
        get: {
            req: AlertsActiveAreaData;
            res: {
                /**
                 * A collection of alerts.
                 */
                200: AlertCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/active/region/{region}': {
        get: {
            req: AlertsActiveRegionData;
            res: {
                /**
                 * A collection of alerts.
                 */
                200: AlertCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/types': {
        get: {
            res: {
                /**
                 * A list of recognized event types
                 */
                200: {
                    /**
                     * A list of recognized event types
                     */
                    eventTypes?: Array<(string)>;
                };
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/alerts/{id}': {
        get: {
            req: AlertsSingleData;
            res: {
                /**
                 * An alert record
                 */
                200: AlertJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/cwsus/{cwsuId}': {
        get: {
            req: CwsuData;
            res: {
                /**
                 * success
                 */
                200: Office;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/cwsus/{cwsuId}/cwas': {
        get: {
            req: CwasData;
            res: {
                /**
                 * success
                 */
                200: CenterWeatherAdvisoryCollectionGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/cwsus/{cwsuId}/cwas/{date}/{sequence}': {
        get: {
            req: CwaData;
            res: {
                /**
                 * success
                 */
                200: CenterWeatherAdvisoryGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/sigmets': {
        get: {
            req: SigmetQueryData;
            res: {
                /**
                 * success
                 */
                200: SigmetCollectionGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/sigmets/{atsu}': {
        get: {
            req: SigmetsByAtsuData;
            res: {
                /**
                 * success
                 */
                200: SigmetCollectionGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/sigmets/{atsu}/{date}': {
        get: {
            req: SigmetsByAtsuByDateData;
            res: {
                /**
                 * success
                 */
                200: SigmetCollectionGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/aviation/sigmets/{atsu}/{date}/{time}': {
        get: {
            req: SigmetData;
            res: {
                /**
                 * success
                 */
                200: SigmetGeoJson;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/glossary': {
        get: {
            res: {
                /**
                 * A set of glossary terms
                 */
                200: {
                    '@context'?: JsonLdContext;
                    /**
                     * A list of glossary terms
                     */
                    glossary?: Array<{
                        /**
                         * The term being defined
                         */
                        term?: string;
                        /**
                         * A definition for the term
                         */
                        definition?: string;
                    }>;
                };
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/gridpoints/{wfo}/{x},{y}': {
        get: {
            req: GridpointData;
            res: {
                /**
                 * Gridpoint forecast data
                 */
                200: Gridpoint;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/gridpoints/{wfo}/{x},{y}/forecast': {
        get: {
            req: GridpointForecastData;
            res: {
                /**
                 * A forecast for a gridpoint.
                 */
                200: GridpointForecastJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/gridpoints/{wfo}/{x},{y}/forecast/hourly': {
        get: {
            req: GridpointForecastHourlyData;
            res: {
                /**
                 * A forecast for a gridpoint.
                 */
                200: GridpointForecastJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/gridpoints/{wfo}/{x},{y}/stations': {
        get: {
            req: GridpointStationsData;
            res: {
                /**
                 * A collection of observation stations.
                 */
                200: ObservationStationCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/icons/{set}/{timeOfDay}/{first}': {
        get: {
            req: IconsData;
            res: {
                /**
                 * success
                 */
                200: BinaryFile;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/icons/{set}/{timeOfDay}/{first}/{second}': {
        get: {
            req: IconsDualConditionData;
            res: {
                /**
                 * success
                 */
                200: BinaryFile;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/icons': {
        get: {
            res: {
                /**
                 * success
                 */
                200: {
                    '@context'?: JsonLdContext;
                    icons: {
                        [key: string]: {
                            description: string;
                        };
                    };
                };
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/thumbnails/satellite/{area}': {
        get: {
            req: SatelliteThumbnailsData;
            res: {
                /**
                 * An image file
                 */
                200: BinaryFile;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}/observations': {
        get: {
            req: StationObservationListData;
            res: {
                /**
                 * A collection of observation records.
                 */
                200: ObservationCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}/observations/latest': {
        get: {
            req: StationObservationLatestData;
            res: {
                /**
                 * An observation record.
                 */
                200: Observation;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}/observations/{time}': {
        get: {
            req: StationObservationTimeData;
            res: {
                /**
                 * An observation record.
                 */
                200: Observation;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}/tafs': {
        get: {
            req: TafsData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}/tafs/{date}/{time}': {
        get: {
            req: TafData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations': {
        get: {
            req: ObsStationsData;
            res: {
                /**
                 * A collection of observation stations.
                 */
                200: ObservationStationCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/stations/{stationId}': {
        get: {
            req: ObsStationData;
            res: {
                /**
                 * success
                 */
                200: ObservationStationJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/offices/{officeId}': {
        get: {
            req: OfficeData;
            res: {
                /**
                 * success
                 */
                200: Office;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/offices/{officeId}/headlines/{headlineId}': {
        get: {
            req: OfficeHeadlineData;
            res: {
                /**
                 * success
                 */
                200: OfficeHeadline;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/offices/{officeId}/headlines': {
        get: {
            req: OfficeHeadlinesData;
            res: {
                /**
                 * success
                 */
                200: OfficeHeadlineCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/points/{point}': {
        get: {
            req: PointData;
            res: {
                /**
                 * success
                 */
                200: PointJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/points/{point}/stations': {
        get: {
            req: PointStationsData;
            res: {
                /**
                 * redirect to gridpoint stations
                 */
                301: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/servers': {
        get: {
            req: RadarServersData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/servers/{id}': {
        get: {
            req: RadarServerData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/stations': {
        get: {
            req: RadarStationsData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/stations/{stationId}': {
        get: {
            req: RadarStationData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/stations/{stationId}/alarms': {
        get: {
            req: RadarStationAlarmsData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/queues/{host}': {
        get: {
            req: RadarQueueData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/radar/profilers/{stationId}': {
        get: {
            req: RadarProfilerData;
            res: {
                /**
                 * success
                 */
                200: unknown;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products': {
        get: {
            req: ProductsQueryData;
            res: {
                /**
                 * success
                 */
                200: TextProductCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/locations': {
        get: {
            res: {
                /**
                 * success
                 */
                200: TextProductLocationCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/types': {
        get: {
            res: {
                /**
                 * success
                 */
                200: TextProductTypeCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/{productId}': {
        get: {
            req: ProductData;
            res: {
                /**
                 * success
                 */
                200: TextProduct;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/types/{typeId}': {
        get: {
            req: ProductsTypeData;
            res: {
                /**
                 * success
                 */
                200: TextProductCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/types/{typeId}/locations': {
        get: {
            req: ProductsTypeLocationsData;
            res: {
                /**
                 * success
                 */
                200: TextProductLocationCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/locations/{locationId}/types': {
        get: {
            req: LocationProductsData;
            res: {
                /**
                 * success
                 */
                200: TextProductTypeCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/products/types/{typeId}/locations/{locationId}': {
        get: {
            req: ProductsTypeLocationData;
            res: {
                /**
                 * success
                 */
                200: TextProductCollection;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones': {
        get: {
            req: ZoneListData;
            res: {
                /**
                 * success
                 */
                200: ZoneCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones/{type}': {
        get: {
            req: ZoneListTypeData;
            res: {
                /**
                 * success
                 */
                200: ZoneCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones/{type}/{zoneId}': {
        get: {
            req: ZoneData;
            res: {
                /**
                 * success
                 */
                200: Zone;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones/{type}/{zoneId}/forecast': {
        get: {
            req: ZoneForecastData;
            res: {
                /**
                 * success
                 */
                200: ZoneForecast;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones/forecast/{zoneId}/observations': {
        get: {
            req: ZoneObsData;
            res: {
                /**
                 * success
                 */
                200: ObservationCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
    '/zones/forecast/{zoneId}/stations': {
        get: {
            req: ZoneStationsData;
            res: {
                /**
                 * A collection of observation stations.
                 */
                200: ObservationStationCollectionJsonLd;
                /**
                 * An error response.
                 */
                default: ProblemDetail;
            };
        };
    };
};