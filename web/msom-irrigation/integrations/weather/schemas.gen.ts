// This file is auto-generated by @hey-api/openapi-ts

export const $Alert = {
    type: 'object',
    properties: {
        id: {
            '$ref': '#/components/schemas/AlertId'
        },
        areaDesc: {
            type: 'string',
            description: 'A textual description of the area affected by the alert.'
        },
        geocode: {
            type: 'object',
            properties: {
                UGC: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/NWSZoneID'
                    },
                    description: 'A list of NWS public zone or county identifiers.'
                },
                SAME: {
                    type: 'array',
                    items: {
                        pattern: '^\\d{6}$',
                        type: 'string'
                    },
                    description: 'A list of SAME (Specific Area Message Encoding) codes for affected counties.'
                }
            },
            description: 'Lists of codes for NWS public zones and counties affected by the alert.'
        },
        affectedZones: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            },
            description: `An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.
`
        },
        references: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    '@id': {
                        type: 'string',
                        description: 'An API link to the prior alert.',
                        format: 'uri'
                    },
                    identifier: {
                        '$ref': '#/components/schemas/AlertId'
                    },
                    sender: {
                        type: 'string',
                        description: 'The sender of the prior alert.'
                    },
                    sent: {
                        type: 'string',
                        description: 'The time the prior alert was sent.',
                        format: 'date-time'
                    }
                }
            },
            description: 'A list of prior alerts that this alert updates or replaces.'
        },
        sent: {
            type: 'string',
            description: 'The time of the origination of the alert message.',
            format: 'date-time'
        },
        effective: {
            type: 'string',
            description: 'The effective time of the information of the alert message.',
            format: 'date-time'
        },
        onset: {
            type: 'string',
            description: 'The expected time of the beginning of the subject event of the alert message.',
            format: 'date-time',
            nullable: true
        },
        expires: {
            type: 'string',
            description: 'The expiry time of the information of the alert message.',
            format: 'date-time'
        },
        ends: {
            type: 'string',
            description: 'The expected end time of the subject event of the alert message.',
            format: 'date-time',
            nullable: true
        },
        status: {
            '$ref': '#/components/schemas/AlertStatus'
        },
        messageType: {
            '$ref': '#/components/schemas/AlertMessageType'
        },
        category: {
            enum: ['Met', 'Geo', 'Safety', 'Security', 'Rescue', 'Fire', 'Health', 'Env', 'Transport', 'Infra', 'CBRNE', 'Other'],
            type: 'string',
            description: 'The code denoting the category of the subject event of the alert message.'
        },
        severity: {
            '$ref': '#/components/schemas/AlertSeverity'
        },
        certainty: {
            '$ref': '#/components/schemas/AlertCertainty'
        },
        urgency: {
            '$ref': '#/components/schemas/AlertUrgency'
        },
        event: {
            type: 'string',
            description: 'The text denoting the type of the subject event of the alert message.'
        },
        sender: {
            type: 'string',
            description: 'Email address of the NWS webmaster.'
        },
        senderName: {
            type: 'string',
            description: 'The text naming the originator of the alert message.'
        },
        headline: {
            type: 'string',
            description: 'The text headline of the alert message.',
            nullable: true
        },
        description: {
            type: 'string',
            description: 'The text describing the subject event of the alert message.'
        },
        instruction: {
            type: 'string',
            description: `The text describing the recommended action to be taken by recipients of the alert message.
`,
            nullable: true
        },
        response: {
            enum: ['Shelter', 'Evacuate', 'Prepare', 'Execute', 'Avoid', 'Monitor', 'Assess', 'AllClear', 'None'],
            type: 'string',
            description: `The code denoting the type of action recommended for the target audience.
This corresponds to responseType in the CAP specification.
`
        },
        parameters: {
            type: 'object',
            description: `System-specific additional parameters associated with the alert message.
The keys in this object correspond to parameter definitions in the NWS CAP specification.
`,
            additionalProperties: {
                type: 'array',
                items: {}
            }
        }
    },
    description: `An object representing a public alert message.
Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.
http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12
`
} as const;

export const $AlertCollection = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            description: 'A title describing the alert collection'
        },
        updated: {
            type: 'string',
            description: 'The last time a change occurred to this collection',
            format: 'date-time'
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationInfo'
        }
    }
} as const;

export const $AlertCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            properties: {
                                '$ref': '#/components/schemas/Alert'
                            }
                        }
                    }
                }
            }
        },
        {
            '$ref': '#/components/schemas/AlertCollection'
        }
    ]
} as const;

export const $AlertCollectionJsonLd = {
    allOf: [
        {
            '$ref': '#/components/schemas/AlertCollection'
        },
        {
            type: 'object',
            properties: {
                '@context': {
                    '$ref': '#/components/schemas/JsonLdContext'
                },
                '@graph': {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/Alert'
                    }
                }
            }
        }
    ]
} as const;

export const $AlertCap = {
    type: 'object'
} as const;

export const $AlertGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Alert'
                }
            }
        }
    ]
} as const;

export const $AlertJsonLd = {
    type: 'object',
    properties: {
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Alert'
            }
        }
    }
} as const;

export const $AlertId = {
    type: 'string',
    description: 'The identifier of the alert message.'
} as const;

export const $AlertCertainty = {
    enum: ['Observed', 'Likely', 'Possible', 'Unlikely', 'Unknown'],
    type: 'string'
} as const;

export const $AlertMessageType = {
    enum: ['Alert', 'Update', 'Cancel', 'Ack', 'Error'],
    type: 'string'
} as const;

export const $AlertSeverity = {
    enum: ['Extreme', 'Severe', 'Moderate', 'Minor', 'Unknown'],
    type: 'string'
} as const;

export const $AlertStatus = {
    enum: ['Actual', 'Exercise', 'System', 'Test', 'Draft'],
    type: 'string'
} as const;

export const $AlertUrgency = {
    enum: ['Immediate', 'Expected', 'Future', 'Past', 'Unknown'],
    type: 'string'
} as const;

export const $AlertAtomEntry = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        updated: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        published: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        author: {
            type: 'object',
            properties: {
                name: {
                    type: 'string'
                }
            },
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        summary: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        event: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        sent: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        effective: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        expires: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        status: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        msgType: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        category: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        urgency: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        severity: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        certainty: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        areaDesc: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        polygon: {
            type: 'string',
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        geocode: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlertXMLParameter'
            },
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        },
        parameter: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlertXMLParameter'
            },
            xml: {
                namespace: 'urn:oasis:names:tc:emergency:cap:1.2'
            }
        }
    },
    description: 'An alert entry in an Atom feed',
    xml: {
        name: 'entry',
        namespace: 'http://www.w3.org/2005/Atom'
    }
} as const;

export const $AlertXMLParameter = {
    type: 'object',
    properties: {
        valueName: {
            type: 'string'
        },
        value: {
            type: 'string'
        }
    }
} as const;

export const $AlertAtomFeed = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        generator: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        updated: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        author: {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                    xml: {
                        namespace: 'http://www.w3.org/2005/Atom'
                    }
                }
            },
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        title: {
            type: 'string',
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        },
        entry: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/AlertAtomEntry'
            },
            xml: {
                namespace: 'http://www.w3.org/2005/Atom'
            }
        }
    },
    description: 'An alert feed in Atom format',
    xml: {
        name: 'feed',
        namespace: 'http://www.w3.org/2005/Atom'
    }
} as const;

export const $AreaCode = {
    oneOf: [
        {
            '$ref': '#/components/schemas/StateTerritoryCode'
        },
        {
            '$ref': '#/components/schemas/MarineAreaCode'
        }
    ],
    description: 'State/territory codes and marine area codes'
} as const;

export const $ATSUIdentifier = {
    pattern: '^[A-Z]{3,4}$',
    type: 'string',
    description: 'ATSU Identifier'
} as const;

export const $BinaryFile = {
    type: 'string',
    format: 'binary'
} as const;

export const $CenterWeatherAdvisoryCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            properties: {
                                '$ref': '#/components/schemas/CenterWeatherAdvisory'
                            }
                        }
                    }
                }
            }
        }
    ]
} as const;

export const $CenterWeatherAdvisoryGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/CenterWeatherAdvisory'
                }
            }
        }
    ]
} as const;

export const $CenterWeatherAdvisory = {
    type: 'object',
    properties: {
        id: {
            type: 'string'
        },
        issueTime: {
            type: 'string',
            format: 'date-time'
        },
        cwsu: {
            '$ref': '#/components/schemas/NWSCenterWeatherServiceUnitId'
        },
        sequence: {
            minimum: 101,
            type: 'integer'
        },
        start: {
            type: 'string',
            format: 'date-time'
        },
        end: {
            type: 'string',
            format: 'date-time'
        },
        observedProperty: {
            type: 'string'
        },
        text: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $CenterWeatherServiceUnitJsonLd = {
    '$ref': '#/components/schemas/Office'
} as const;

export const $Date = {
    type: 'string',
    description: 'Date (in YYYY-MM-DD format).',
    format: 'date'
} as const;

export const $GeometryString = {
    type: 'string',
    description: 'A geometry represented in Well-Known Text (WKT) format.',
    format: 'wkt',
    nullable: true
} as const;

export const $GeoJsonBoundingBox = {
    minItems: 4,
    type: 'array',
    items: {
        type: 'number'
    },
    description: 'A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.'
} as const;

export const $GeoJsonCoordinate = {
    minItems: 2,
    type: 'array',
    items: {
        type: 'number'
    },
    description: 'A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.'
} as const;

export const $GeoJsonGeometry = {
    oneOf: [
        {
            title: 'GeoJSON Point',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['Point'],
                    type: 'string'
                },
                coordinates: {
                    '$ref': '#/components/schemas/GeoJsonCoordinate'
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        },
        {
            title: 'GeoJSON LineString',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['LineString'],
                    type: 'string'
                },
                coordinates: {
                    '$ref': '#/components/schemas/GeoJsonLineString'
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        },
        {
            title: 'GeoJSON Polygon',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['Polygon'],
                    type: 'string'
                },
                coordinates: {
                    '$ref': '#/components/schemas/GeoJsonPolygon'
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        },
        {
            title: 'GeoJSON MultiPoint',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['MultiPoint'],
                    type: 'string'
                },
                coordinates: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/GeoJsonCoordinate'
                    }
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        },
        {
            title: 'GeoJSON MultiLineString',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['MultiLineString'],
                    type: 'string'
                },
                coordinates: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/GeoJsonLineString'
                    }
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        },
        {
            title: 'GeoJSON MultiPolygon',
            required: ['type', 'coordinates'],
            type: 'object',
            properties: {
                type: {
                    enum: ['MultiPolygon'],
                    type: 'string'
                },
                coordinates: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/GeoJsonPolygon'
                    }
                },
                bbox: {
                    '$ref': '#/components/schemas/GeoJsonBoundingBox'
                }
            }
        }
    ],
    description: 'A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.',
    nullable: true
} as const;

export const $GeoJsonFeature = {
    required: ['type', 'geometry', 'properties'],
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        id: {
            type: 'string',
            format: 'uri'
        },
        type: {
            enum: ['Feature'],
            type: 'string'
        },
        geometry: {
            '$ref': '#/components/schemas/GeoJsonGeometry'
        },
        properties: {
            type: 'object'
        }
    },
    description: 'A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.',
    additionalProperties: false
} as const;

export const $GeoJsonFeatureCollection = {
    required: ['type', 'features'],
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        type: {
            enum: ['FeatureCollection'],
            type: 'string'
        },
        features: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GeoJsonFeature'
            }
        }
    },
    description: 'A GeoJSON feature collection. Please refer to IETF RFC 7946 for information on the GeoJSON format.'
} as const;

export const $GeoJsonLineString = {
    minItems: 2,
    type: 'array',
    items: {
        '$ref': '#/components/schemas/GeoJsonCoordinate'
    },
    description: 'A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format.'
} as const;

export const $GeoJsonPolygon = {
    type: 'array',
    items: {
        minItems: 4,
        type: 'array',
        items: {
            '$ref': '#/components/schemas/GeoJsonCoordinate'
        }
    },
    description: 'A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.'
} as const;

export const $Gridpoint = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        '@type': {
            enum: ['wx:Gridpoint'],
            type: 'string'
        },
        updateTime: {
            type: 'string',
            format: 'date-time'
        },
        validTimes: {
            '$ref': '#/components/schemas/ISO8601Interval'
        },
        elevation: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        forecastOffice: {
            type: 'string',
            format: 'uri'
        },
        gridId: {
            type: 'string'
        },
        gridX: {
            minimum: 0,
            type: 'integer'
        },
        gridY: {
            minimum: 0,
            type: 'integer'
        },
        weather: {
            required: ['values'],
            type: 'object',
            properties: {
                values: {
                    type: 'array',
                    items: {
                        required: ['validTime', 'value'],
                        type: 'object',
                        properties: {
                            validTime: {
                                '$ref': '#/components/schemas/ISO8601Interval'
                            },
                            value: {
                                type: 'array',
                                items: {
                                    required: ['coverage', 'weather', 'intensity', 'visibility', 'attributes'],
                                    type: 'object',
                                    properties: {
                                        coverage: {
                                            enum: ['areas', 'brief', 'chance', 'definite', 'few', 'frequent', 'intermittent', 'isolated', 'likely', 'numerous', 'occasional', 'patchy', 'periods', 'scattered', 'slight_chance', 'widespread'],
                                            type: 'string',
                                            nullable: true
                                        },
                                        weather: {
                                            enum: ['blowing_dust', 'blowing_sand', 'blowing_snow', 'drizzle', 'fog', 'freezing_fog', 'freezing_drizzle', 'freezing_rain', 'freezing_spray', 'frost', 'hail', 'haze', 'ice_crystals', 'ice_fog', 'rain', 'rain_showers', 'sleet', 'smoke', 'snow', 'snow_showers', 'thunderstorms', 'volcanic_ash', 'water_spouts'],
                                            type: 'string',
                                            nullable: true
                                        },
                                        intensity: {
                                            enum: ['very_light', 'light', 'moderate', 'heavy'],
                                            type: 'string',
                                            nullable: true
                                        },
                                        visibility: {
                                            '$ref': '#/components/schemas/QuantitativeValue'
                                        },
                                        attributes: {
                                            type: 'array',
                                            items: {
                                                enum: ['damaging_wind', 'dry_thunderstorms', 'flooding', 'gusty_wind', 'heavy_rain', 'large_hail', 'small_hail', 'tornadoes'],
                                                type: 'string'
                                            }
                                        }
                                    },
                                    description: 'A value object representing expected weather phenomena.',
                                    additionalProperties: false
                                }
                            }
                        },
                        additionalProperties: false
                    }
                }
            }
        },
        hazards: {
            required: ['values'],
            type: 'object',
            properties: {
                values: {
                    type: 'array',
                    items: {
                        required: ['validTime', 'value'],
                        type: 'object',
                        properties: {
                            validTime: {
                                '$ref': '#/components/schemas/ISO8601Interval'
                            },
                            value: {
                                type: 'array',
                                items: {
                                    required: ['phenomenon', 'significance', 'event_number'],
                                    type: 'object',
                                    properties: {
                                        phenomenon: {
                                            pattern: '^\\w{2}$',
                                            type: 'string',
                                            description: `Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.
`
                                        },
                                        significance: {
                                            pattern: '^\\w$',
                                            type: 'string',
                                            description: `Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703.
This will most frequently be "A" for a watch or "Y" for an advisory.
`
                                        },
                                        event_number: {
                                            type: 'integer',
                                            description: `Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.
`,
                                            nullable: true
                                        }
                                    },
                                    description: 'A value object representing an expected hazard.'
                                }
                            }
                        },
                        additionalProperties: false
                    }
                }
            }
        }
    },
    description: `Raw forecast data for a 2.5km grid square.
This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
* temperature
* dewpoint
* maxTemperature
* minTemperature
* relativeHumidity
* apparentTemperature
* heatIndex
* windChill
* wetBulbGlobeTemperature
* skyCover
* windDirection
* windSpeed
* windGust
* weather
* hazards: Watch and advisory products in effect
* probabilityOfPrecipitation
* quantitativePrecipitation
* iceAccumulation
* snowfallAmount
* snowLevel
* ceilingHeight
* visibility
* transportWindSpeed
* transportWindDirection
* mixingHeight
* hainesIndex
* lightningActivityLevel
* twentyFootWindSpeed
* twentyFootWindDirection
* waveHeight
* wavePeriod
* waveDirection
* primarySwellHeight
* primarySwellDirection
* secondarySwellHeight
* secondarySwellDirection
* wavePeriod2
* windWaveHeight
* dispersionIndex
* pressure: Barometric pressure
* probabilityOfTropicalStormWinds
* probabilityOfHurricaneWinds
* potentialOf15mphWinds
* potentialOf25mphWinds
* potentialOf35mphWinds
* potentialOf45mphWinds
* potentialOf20mphWindGusts
* potentialOf30mphWindGusts
* potentialOf40mphWindGusts
* potentialOf50mphWindGusts
* potentialOf60mphWindGusts
* grasslandFireDangerIndex
* probabilityOfThunder
* davisStabilityIndex
* atmosphericDispersionIndex
* lowVisibilityOccurrenceRiskIndex
* stability
* redFlagThreatIndex
`,
    additionalProperties: {
        '$ref': '#/components/schemas/GridpointQuantitativeValueLayer'
    }
} as const;

export const $GridpointQuantitativeValueLayer = {
    required: ['values'],
    type: 'object',
    properties: {
        uom: {
            '$ref': '#/components/schemas/UnitOfMeasure'
        },
        values: {
            type: 'array',
            items: {
                required: ['validTime', 'value'],
                type: 'object',
                properties: {
                    validTime: {
                        '$ref': '#/components/schemas/ISO8601Interval'
                    },
                    value: {
                        type: 'number',
                        nullable: true
                    }
                },
                additionalProperties: false
            }
        }
    },
    description: `A gridpoint layer consisting of quantitative values (numeric values with associated units of measure).
`
} as const;

export const $GridpointGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Gridpoint'
                }
            }
        }
    ]
} as const;

export const $GridpointJsonLd = {
    '$ref': '#/components/schemas/Gridpoint'
} as const;

export const $GridpointForecast = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        units: {
            '$ref': '#/components/schemas/GridpointForecastUnits'
        },
        forecastGenerator: {
            type: 'string',
            description: 'The internal generator class used to create the forecast text (used for NWS debugging).'
        },
        generatedAt: {
            type: 'string',
            description: 'The time this forecast data was generated.',
            format: 'date-time'
        },
        updateTime: {
            type: 'string',
            description: 'The last update time of the data this forecast was generated from.',
            format: 'date-time'
        },
        updated: {
            type: 'string',
            description: 'This property is deprecated (use updateTime instead).',
            format: 'date-time',
            deprecated: true
        },
        validTimes: {
            '$ref': '#/components/schemas/ISO8601Interval'
        },
        elevation: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        periods: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/GridpointForecastPeriod'
            },
            description: 'An array of forecast periods.'
        }
    },
    description: 'A multi-day forecast for a 2.5km grid square.',
    additionalProperties: false
} as const;

export const $GridpointForecastPeriod = {
    type: 'object',
    properties: {
        number: {
            minimum: 1,
            type: 'integer',
            description: 'Sequential period number.'
        },
        name: {
            type: 'string',
            description: `A textual identifier for the period. This value will not be present for hourly forecasts.
`,
            example: 'Tuesday Night'
        },
        startTime: {
            type: 'string',
            description: 'The starting time that this forecast period is valid for.',
            format: 'date-time'
        },
        endTime: {
            type: 'string',
            description: 'The ending time that this forecast period is valid for.',
            format: 'date-time'
        },
        isDaytime: {
            type: 'boolean',
            description: 'Indicates whether this period is daytime or nighttime.'
        },
        temperature: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/QuantitativeValue'
                },
                {
                    type: 'integer'
                }
            ],
            description: `High/low temperature for the period, depending on whether the period is day or night.
This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
`
        },
        temperatureUnit: {
            enum: ['F', 'C'],
            type: 'string',
            description: `The unit of the temperature value (Fahrenheit or Celsius).
This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the "forecast_temperature_qv" feature flag on the request.
`,
            deprecated: true
        },
        temperatureTrend: {
            enum: ['rising', 'falling'],
            type: 'string',
            description: `If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)
`,
            nullable: true
        },
        probabilityOfPrecipitation: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        dewpoint: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        relativeHumidity: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        windSpeed: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/QuantitativeValue'
                },
                {
                    type: 'string'
                }
            ],
            description: `Wind speed for the period.
This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
`
        },
        windGust: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/QuantitativeValue'
                },
                {
                    type: 'string'
                }
            ],
            description: `Peak wind gust for the period.
This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the "forecast_wind_speed_qv" feature flag on the request.
`,
            nullable: true
        },
        windDirection: {
            enum: ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'],
            type: 'string',
            description: 'The prevailing direction of the wind for the period, using a 16-point compass.'
        },
        icon: {
            type: 'string',
            description: 'A link to an icon representing the forecast summary.',
            format: 'uri',
            deprecated: true
        },
        shortForecast: {
            type: 'string',
            description: 'A brief textual forecast summary for the period.'
        },
        detailedForecast: {
            type: 'string',
            description: 'A detailed textual forecast for the period.'
        }
    },
    description: `An object containing forecast information for a specific time period (generally 12-hour or 1-hour).
`,
    additionalProperties: false
} as const;

export const $GridpointForecastUnits = {
    enum: ['us', 'si'],
    type: 'string',
    description: 'Denotes the units used in the textual portions of the forecast.',
    default: 'us'
} as const;

export const $GridpointForecastGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/GridpointForecast'
                }
            }
        }
    ]
} as const;

export const $GridpointForecastJsonLd = {
    allOf: [
        {
            '$ref': '#/components/schemas/GridpointForecast'
        },
        {
            required: ['@context', 'geometry'],
            type: 'object',
            properties: {
                '@context': {
                    '$ref': '#/components/schemas/JsonLdContext'
                },
                geometry: {
                    '$ref': '#/components/schemas/GeometryString'
                }
            }
        }
    ]
} as const;

export const $ISO8601Duration = {
    pattern: '^P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$',
    type: 'string',
    description: 'A time duration in ISO 8601 format.',
    example: 'P2DT12H'
} as const;

export const $ISO8601Interval = {
    oneOf: [
        {
            pattern: '^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:?\\d{2}?)|NOW)\\/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:?\\d{2}?)|NOW)$',
            type: 'string',
            example: '2007-03-01T13:00:00Z/2008-05-11T15:30:00Z'
        },
        {
            pattern: '^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:?\\d{2}?)|NOW)\\/P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$',
            type: 'string',
            example: '2007-03-01T13:00:00Z/P1Y2M10DT2H30M'
        },
        {
            pattern: '^P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?\\/(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:?\\d{2}?)|NOW)$',
            type: 'string',
            example: 'P1Y2M10DT2H30M/2008-05-11T15:30:00Z'
        }
    ],
    description: `A time interval in ISO 8601 format. This can be one of:

    1. Start and end time
    2. Start time and duration
    3. Duration and end time
The string "NOW" can also be used in place of a start/end time.
`
} as const;

export const $JsonLdContext = {
    anyOf: [
        {
            type: 'array',
            items: {}
        },
        {
            type: 'object'
        }
    ]
} as const;

export const $LandRegionCode = {
    enum: ['AR', 'CR', 'ER', 'PR', 'SR', 'WR'],
    type: 'string',
    description: `Land region code. These correspond to the six NWS regional headquarters:
* AR: Alaska Region
* CR: Central Region
* ER: Eastern Region
* PR: Pacific Region
* SR: Southern Region
* WR: Western Region
`
} as const;

export const $MarineAreaCode = {
    enum: ['AM', 'AN', 'GM', 'LC', 'LE', 'LH', 'LM', 'LO', 'LS', 'PH', 'PK', 'PM', 'PS', 'PZ', 'SL'],
    type: 'string',
    description: `Marine area code as defined in NWS Directive 10-302:
* AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean
* AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC
* GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL
* LC: Lake St. Clair
* LE: Lake Erie
* LH: Lake Huron
* LM: Lake Michigan
* LO: Lake Ontario
* LS: Lake Superior
* PH: Central Pacific Ocean including Hawaiian waters
* PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska
* PM: Western Pacific Ocean including Mariana Island waters
* PS: South Central Pacific Ocean including American Samoa waters
* PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border
* SL: St. Lawrence River above St. Regis
`
} as const;

export const $MarineRegionCode = {
    enum: ['AL', 'AT', 'GL', 'GM', 'PA', 'PI'],
    type: 'string',
    description: `Marine region code. These are groups of marine areas combined.
* AL: Alaska waters (PK)
* AT: Atlantic Ocean (AM, AN)
* GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)
* GM: Gulf of Mexico (GM)
* PA: Eastern Pacific Ocean and U.S. West Coast (PZ)
* PI: Central and Western Pacific (PH, PM, PS)
`
} as const;

export const $MetarPhenomenon = {
    required: ['intensity', 'modifier', 'weather', 'rawString'],
    type: 'object',
    properties: {
        intensity: {
            enum: ['light', 'heavy'],
            type: 'string',
            nullable: true
        },
        modifier: {
            enum: ['patches', 'blowing', 'low_drifting', 'freezing', 'shallow', 'partial', 'showers'],
            type: 'string',
            nullable: true
        },
        weather: {
            enum: ['fog_mist', 'dust_storm', 'dust', 'drizzle', 'funnel_cloud', 'fog', 'smoke', 'hail', 'snow_pellets', 'haze', 'ice_crystals', 'ice_pellets', 'dust_whirls', 'spray', 'rain', 'sand', 'snow_grains', 'snow', 'squalls', 'sand_storm', 'thunderstorms', 'unknown', 'volcanic_ash'],
            type: 'string'
        },
        rawString: {
            type: 'string'
        },
        inVicinity: {
            type: 'boolean'
        }
    },
    description: 'An object representing a decoded METAR phenomenon string.',
    additionalProperties: false
} as const;

export const $MetarSkyCoverage = {
    enum: ['OVC', 'BKN', 'SCT', 'FEW', 'SKC', 'CLR', 'VV'],
    type: 'string'
} as const;

export const $NWSCenterWeatherServiceUnitId = {
    enum: ['ZAB', 'ZAN', 'ZAU', 'ZBW', 'ZDC', 'ZDV', 'ZFA', 'ZFW', 'ZHU', 'ZID', 'ZJX', 'ZKC', 'ZLA', 'ZLC', 'ZMA', 'ZME', 'ZMP', 'ZNY', 'ZOA', 'ZOB', 'ZSE', 'ZTL'],
    type: 'string',
    description: 'Three-letter identifier for a Center Weather Service Unit (CWSU).'
} as const;

export const $NWSForecastOfficeId = {
    enum: ['AKQ', 'ALY', 'BGM', 'BOX', 'BTV', 'BUF', 'CAE', 'CAR', 'CHS', 'CLE', 'CTP', 'GSP', 'GYX', 'ILM', 'ILN', 'LWX', 'MHX', 'OKX', 'PBZ', 'PHI', 'RAH', 'RLX', 'RNK', 'ABQ', 'AMA', 'BMX', 'BRO', 'CRP', 'EPZ', 'EWX', 'FFC', 'FWD', 'HGX', 'HUN', 'JAN', 'JAX', 'KEY', 'LCH', 'LIX', 'LUB', 'LZK', 'MAF', 'MEG', 'MFL', 'MLB', 'MOB', 'MRX', 'OHX', 'OUN', 'SHV', 'SJT', 'SJU', 'TAE', 'TBW', 'TSA', 'ABR', 'APX', 'ARX', 'BIS', 'BOU', 'CYS', 'DDC', 'DLH', 'DMX', 'DTX', 'DVN', 'EAX', 'FGF', 'FSD', 'GID', 'GJT', 'GLD', 'GRB', 'GRR', 'ICT', 'ILX', 'IND', 'IWX', 'JKL', 'LBF', 'LMK', 'LOT', 'LSX', 'MKX', 'MPX', 'MQT', 'OAX', 'PAH', 'PUB', 'RIW', 'SGF', 'TOP', 'UNR', 'BOI', 'BYZ', 'EKA', 'FGZ', 'GGW', 'HNX', 'LKN', 'LOX', 'MFR', 'MSO', 'MTR', 'OTX', 'PDT', 'PIH', 'PQR', 'PSR', 'REV', 'SEW', 'SGX', 'SLC', 'STO', 'TFX', 'TWC', 'VEF', 'AER', 'AFC', 'AFG', 'AJK', 'ALU', 'GUM', 'HPA', 'HFO', 'PPG', 'STU', 'NH1', 'NH2', 'ONA', 'ONP'],
    type: 'string',
    description: 'Three-letter identifier for a NWS office.'
} as const;

export const $NWSNationalHQId = {
    enum: ['NWS'],
    type: 'string',
    description: 'Three-letter identifier for NWS National HQ.'
} as const;

export const $NWSOfficeId = {
    oneOf: [
        {
            '$ref': '#/components/schemas/NWSForecastOfficeId'
        },
        {
            '$ref': '#/components/schemas/NWSRegionalHQId'
        },
        {
            '$ref': '#/components/schemas/NWSNationalHQId'
        }
    ]
} as const;

export const $NWSRegionalHQId = {
    enum: ['ARH', 'CRH', 'ERH', 'PRH', 'SRH', 'WRH'],
    type: 'string',
    description: 'Three-letter identifier for a NWS Regional HQ.'
} as const;

export const $NWSZoneID = {
    pattern: '^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\\d{3}$',
    type: 'string',
    description: `UGC identifier for a NWS forecast zone or county.
The first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).
The third letter will be Z for public/fire zone or C for county.
`
} as const;

export const $NWSZoneType = {
    enum: ['land', 'marine', 'forecast', 'public', 'coastal', 'offshore', 'fire', 'county'],
    type: 'string'
} as const;

export const $Observation = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        '@type': {
            enum: ['wx:ObservationStation'],
            type: 'string'
        },
        elevation: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        station: {
            type: 'string',
            format: 'uri'
        },
        timestamp: {
            type: 'string',
            format: 'date-time'
        },
        rawMessage: {
            type: 'string'
        },
        textDescription: {
            type: 'string'
        },
        icon: {
            type: 'string',
            format: 'uri',
            nullable: true,
            deprecated: true
        },
        presentWeather: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/MetarPhenomenon'
            }
        },
        temperature: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        dewpoint: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        windDirection: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        windSpeed: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        windGust: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        barometricPressure: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        seaLevelPressure: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        visibility: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        maxTemperatureLast24Hours: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        minTemperatureLast24Hours: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        precipitationLastHour: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        precipitationLast3Hours: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        precipitationLast6Hours: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        relativeHumidity: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        windChill: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        heatIndex: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        cloudLayers: {
            type: 'array',
            items: {
                required: ['base', 'amount'],
                type: 'object',
                properties: {
                    base: {
                        '$ref': '#/components/schemas/QuantitativeValue'
                    },
                    amount: {
                        '$ref': '#/components/schemas/MetarSkyCoverage'
                    }
                },
                additionalProperties: false
            },
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ObservationGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Observation'
                }
            }
        }
    ]
} as const;

export const $ObservationJsonLd = {
    '$ref': '#/components/schemas/Observation'
} as const;

export const $ObservationCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            properties: {
                                '$ref': '#/components/schemas/Observation'
                            }
                        }
                    }
                }
            }
        }
    ]
} as const;

export const $ObservationCollectionJsonLd = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Observation'
            }
        }
    },
    additionalProperties: false
} as const;

export const $ObservationStation = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        '@type': {
            enum: ['wx:ObservationStation'],
            type: 'string'
        },
        elevation: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        stationIdentifier: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        timeZone: {
            type: 'string',
            format: 'iana-time-zone-identifier'
        },
        forecast: {
            type: 'string',
            description: 'A link to the NWS public forecast zone containing this station.',
            format: 'uri'
        },
        county: {
            type: 'string',
            description: 'A link to the NWS county zone containing this station.',
            format: 'uri'
        },
        fireWeatherZone: {
            type: 'string',
            description: 'A link to the NWS fire weather forecast zone containing this station.',
            format: 'uri'
        }
    },
    additionalProperties: false
} as const;

export const $ObservationStationGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/ObservationStation'
                }
            }
        }
    ]
} as const;

export const $ObservationStationJsonLd = {
    allOf: [
        {
            '$ref': '#/components/schemas/ObservationStation'
        },
        {
            required: ['@context', 'geometry'],
            type: 'object',
            properties: {
                '@context': {
                    '$ref': '#/components/schemas/JsonLdContext'
                },
                geometry: {
                    '$ref': '#/components/schemas/GeometryString'
                }
            }
        }
    ]
} as const;

export const $ObservationStationCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            properties: {
                                '$ref': '#/components/schemas/ObservationStation'
                            }
                        }
                    }
                },
                observationStations: {
                    type: 'array',
                    items: {
                        type: 'string',
                        format: 'uri'
                    }
                },
                pagination: {
                    '$ref': '#/components/schemas/PaginationInfo'
                }
            }
        }
    ]
} as const;

export const $ObservationStationCollectionJsonLd = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ObservationStation'
            }
        },
        observationStations: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        pagination: {
            '$ref': '#/components/schemas/PaginationInfo'
        }
    },
    additionalProperties: false
} as const;

export const $Office = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@type': {
            enum: ['GovernmentOrganization'],
            type: 'string'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        id: {
            type: 'string'
        },
        name: {
            type: 'string'
        },
        address: {
            type: 'object',
            properties: {
                '@type': {
                    enum: ['PostalAddress'],
                    type: 'string'
                },
                streetAddress: {
                    type: 'string'
                },
                addressLocality: {
                    type: 'string'
                },
                addressRegion: {
                    type: 'string'
                },
                postalCode: {
                    type: 'string'
                }
            },
            additionalProperties: false
        },
        telephone: {
            type: 'string'
        },
        faxNumber: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        sameAs: {
            type: 'string',
            format: 'uri'
        },
        nwsRegion: {
            type: 'string'
        },
        parentOrganization: {
            type: 'string',
            format: 'uri'
        },
        responsibleCounties: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        responsibleForecastZones: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        responsibleFireZones: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        approvedObservationStations: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        }
    },
    additionalProperties: false
} as const;

export const $OfficeHeadline = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        id: {
            type: 'string'
        },
        office: {
            type: 'string',
            format: 'uri'
        },
        important: {
            type: 'boolean'
        },
        issuanceTime: {
            type: 'string',
            format: 'date-time'
        },
        link: {
            type: 'string',
            format: 'uri'
        },
        name: {
            type: 'string'
        },
        title: {
            type: 'string'
        },
        summary: {
            type: 'string',
            nullable: true
        },
        content: {
            type: 'string'
        }
    }
} as const;

export const $OfficeHeadlineCollection = {
    required: ['@context', '@graph'],
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OfficeHeadline'
            }
        }
    },
    additionalProperties: false
} as const;

export const $PaginationInfo = {
    required: ['next'],
    type: 'object',
    properties: {
        next: {
            type: 'string',
            description: 'A link to the next page of records',
            format: 'uri'
        }
    },
    description: 'Links for retrieving more data from paged data sets',
    additionalProperties: false
} as const;

export const $Point = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        '@type': {
            enum: ['wx:Point'],
            type: 'string'
        },
        cwa: {
            '$ref': '#/components/schemas/NWSForecastOfficeId'
        },
        forecastOffice: {
            type: 'string',
            format: 'uri'
        },
        gridId: {
            '$ref': '#/components/schemas/NWSForecastOfficeId'
        },
        gridX: {
            minimum: 0,
            type: 'integer'
        },
        gridY: {
            minimum: 0,
            type: 'integer'
        },
        forecast: {
            type: 'string',
            format: 'uri'
        },
        forecastHourly: {
            type: 'string',
            format: 'uri'
        },
        forecastGridData: {
            type: 'string',
            format: 'uri'
        },
        observationStations: {
            type: 'string',
            format: 'uri'
        },
        relativeLocation: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/RelativeLocationGeoJson'
                },
                {
                    '$ref': '#/components/schemas/RelativeLocationJsonLd'
                }
            ]
        },
        forecastZone: {
            type: 'string',
            format: 'uri'
        },
        county: {
            type: 'string',
            format: 'uri'
        },
        fireWeatherZone: {
            type: 'string',
            format: 'uri'
        },
        timeZone: {
            type: 'string'
        },
        radarStation: {
            type: 'string'
        }
    }
} as const;

export const $PointGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Point'
                }
            }
        }
    ]
} as const;

export const $PointJsonLd = {
    allOf: [
        {
            '$ref': '#/components/schemas/Point'
        },
        {
            required: ['@context', 'geometry'],
            type: 'object',
            properties: {
                '@context': {
                    '$ref': '#/components/schemas/JsonLdContext'
                },
                geometry: {
                    '$ref': '#/components/schemas/GeometryString'
                }
            }
        }
    ]
} as const;

export const $PointString = {
    pattern: '^(-?\\d+(?:\\.\\d+)?),(-?\\d+(?:\\.\\d+)?)$',
    type: 'string'
} as const;

export const $ProblemDetail = {
    required: ['type', 'title', 'status', 'detail', 'instance', 'correlationId'],
    type: 'object',
    properties: {
        type: {
            type: 'string',
            description: `A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.
`,
            format: 'uri',
            default: 'about:blank',
            example: 'urn:noaa:nws:api:UnexpectedProblem'
        },
        title: {
            type: 'string',
            description: 'A short, human-readable summary of the problem type.',
            example: 'Unexpected Problem'
        },
        status: {
            maximum: 999,
            minimum: 100,
            type: 'number',
            description: `The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.
`,
            example: 500
        },
        detail: {
            type: 'string',
            description: 'A human-readable explanation specific to this occurrence of the problem.',
            example: 'An unexpected problem has occurred.'
        },
        instance: {
            type: 'string',
            description: `A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.
`,
            format: 'uri',
            example: 'urn:noaa:nws:api:request:493c3a1d-f87e-407f-ae2c-24483f5aab63'
        },
        correlationId: {
            type: 'string',
            description: `A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.
`,
            example: '493c3a1d-f87e-407f-ae2c-24483f5aab63'
        }
    },
    description: 'Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).',
    additionalProperties: true
} as const;

export const $QuantitativeValue = {
    type: 'object',
    properties: {
        value: {
            type: 'number',
            description: 'A measured value',
            nullable: true
        },
        maxValue: {
            type: 'number',
            description: 'The maximum value of a range of measured values'
        },
        minValue: {
            type: 'number',
            description: 'The minimum value of a range of measured values'
        },
        unitCode: {
            '$ref': '#/components/schemas/UnitOfMeasure'
        },
        qualityControl: {
            enum: ['Z', 'C', 'S', 'V', 'X', 'Q', 'G', 'B', 'T'],
            type: 'string',
            description: `For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml
`
        }
    },
    description: `A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue
`,
    additionalProperties: false
} as const;

export const $RegionCode = {
    oneOf: [
        {
            '$ref': '#/components/schemas/LandRegionCode'
        },
        {
            '$ref': '#/components/schemas/MarineRegionCode'
        }
    ]
} as const;

export const $RelativeLocation = {
    type: 'object',
    properties: {
        city: {
            type: 'string'
        },
        state: {
            type: 'string'
        },
        distance: {
            '$ref': '#/components/schemas/QuantitativeValue'
        },
        bearing: {
            '$ref': '#/components/schemas/QuantitativeValue'
        }
    }
} as const;

export const $RelativeLocationGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/RelativeLocation'
                }
            }
        }
    ]
} as const;

export const $RelativeLocationJsonLd = {
    allOf: [
        {
            '$ref': '#/components/schemas/RelativeLocation'
        },
        {
            required: ['geometry'],
            type: 'object',
            properties: {
                geometry: {
                    '$ref': '#/components/schemas/GeometryString'
                }
            }
        }
    ]
} as const;

export const $Sigmet = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uri'
        },
        issueTime: {
            type: 'string',
            format: 'date-time'
        },
        fir: {
            type: 'string',
            nullable: true
        },
        atsu: {
            '$ref': '#/components/schemas/ATSUIdentifier'
        },
        sequence: {
            type: 'string',
            nullable: true
        },
        phenomenon: {
            type: 'string',
            format: 'uri',
            nullable: true
        },
        start: {
            type: 'string',
            format: 'date-time'
        },
        end: {
            type: 'string',
            format: 'date-time'
        }
    },
    additionalProperties: false
} as const;

export const $SigmetCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        '$ref': '#/components/schemas/SigmetGeoJson'
                    }
                }
            }
        }
    ]
} as const;

export const $SigmetGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Sigmet'
                }
            }
        }
    ]
} as const;

export const $SigmetSequenceNumber = {
    type: 'string'
} as const;

export const $StateTerritoryCode = {
    enum: ['AL', 'AK', 'AS', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'MP', 'PW', 'FM', 'MH'],
    type: 'string'
} as const;

export const $TextProduct = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        id: {
            type: 'string'
        },
        wmoCollectiveId: {
            type: 'string'
        },
        issuingOffice: {
            type: 'string'
        },
        issuanceTime: {
            type: 'string',
            format: 'date-time'
        },
        productCode: {
            type: 'string'
        },
        productName: {
            type: 'string'
        },
        productText: {
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $TextProductCollection = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/TextProduct'
            }
        }
    },
    additionalProperties: false
} as const;

export const $TextProductTypeCollection = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                required: ['productCode', 'productName'],
                type: 'object',
                properties: {
                    productCode: {
                        type: 'string'
                    },
                    productName: {
                        type: 'string'
                    }
                },
                additionalProperties: false
            }
        }
    },
    additionalProperties: false
} as const;

export const $TextProductLocationCollection = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        locations: {
            type: 'object',
            additionalProperties: {
                type: 'string',
                nullable: true
            }
        }
    },
    additionalProperties: false
} as const;

export const $Time = {
    pattern: '^([01][0-9]|2[0-3])[0-5][0-9]$',
    type: 'string',
    description: 'A time (in HHMM format). This is always specified in UTC (Zulu) time.'
} as const;

export const $UnitOfMeasure = {
    pattern: '^((wmo|uc|wmoUnit|nwsUnit):)?.*$',
    type: 'string',
    description: `A string denoting a unit of measure, expressed in the format "{unit}" or "{namespace}:{unit}".
Units with the namespace "wmo" or "wmoUnit" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.
Units with the namespace "nwsUnit" are currently custom and do not align to any standard.
Units with no namespace or the namespace "uc" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).
Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.
`
} as const;

export const $Zone = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        '@id': {
            type: 'string',
            format: 'uri'
        },
        '@type': {
            enum: ['wx:Zone'],
            type: 'string'
        },
        id: {
            '$ref': '#/components/schemas/NWSZoneID'
        },
        type: {
            '$ref': '#/components/schemas/NWSZoneType'
        },
        name: {
            type: 'string'
        },
        effectiveDate: {
            type: 'string',
            format: 'date-time'
        },
        expirationDate: {
            type: 'string',
            format: 'date-time'
        },
        state: {
            oneOf: [
                {
                    '$ref': '#/components/schemas/StateTerritoryCode'
                },
                {
                    enum: [''],
                    type: 'string',
                    nullable: true
                }
            ]
        },
        cwa: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NWSForecastOfficeId'
            }
        },
        forecastOffices: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        timeZone: {
            type: 'array',
            items: {
                type: 'string',
                format: 'iana-time-zone-identifier'
            }
        },
        observationStations: {
            type: 'array',
            items: {
                type: 'string',
                format: 'uri'
            }
        },
        radarStation: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ZoneGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/Zone'
                }
            }
        }
    ]
} as const;

export const $ZoneJsonLd = {
    '$ref': '#/components/schemas/Zone'
} as const;

export const $ZoneCollectionGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeatureCollection'
        },
        {
            type: 'object',
            properties: {
                features: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            properties: {
                                '$ref': '#/components/schemas/Zone'
                            }
                        }
                    }
                }
            }
        }
    ]
} as const;

export const $ZoneCollectionJsonLd = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        '@graph': {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Zone'
            }
        }
    },
    additionalProperties: false
} as const;

export const $ZoneForecast = {
    type: 'object',
    properties: {
        '@context': {
            '$ref': '#/components/schemas/JsonLdContext'
        },
        geometry: {
            '$ref': '#/components/schemas/GeometryString'
        },
        zone: {
            type: 'string',
            description: 'An API link to the zone this forecast is for.',
            format: 'uri'
        },
        updated: {
            type: 'string',
            description: 'The time this zone forecast product was published.',
            format: 'date-time'
        },
        periods: {
            type: 'array',
            items: {
                required: ['number', 'name', 'detailedForecast'],
                type: 'object',
                properties: {
                    number: {
                        type: 'integer',
                        description: 'A sequential identifier number.'
                    },
                    name: {
                        type: 'string',
                        description: 'A textual description of the period.',
                        example: 'This Afternoon'
                    },
                    detailedForecast: {
                        type: 'string',
                        description: 'A detailed textual forecast for the period.'
                    }
                },
                additionalProperties: false
            },
            description: 'An array of forecast periods.'
        }
    },
    description: 'An object representing a zone area forecast.',
    additionalProperties: false
} as const;

export const $ZoneForecastGeoJson = {
    allOf: [
        {
            '$ref': '#/components/schemas/GeoJsonFeature'
        },
        {
            type: 'object',
            properties: {
                properties: {
                    '$ref': '#/components/schemas/ZoneForecast'
                }
            }
        }
    ]
} as const;

export const $ZoneForecastJsonLd = {
    '$ref': '#/components/schemas/ZoneForecast'
} as const;